---
title: "HealthData@EU Pilot - Sciensano Use Case"
subtitle: "Population uptake metrics: COVID-19 test positivity, vaccination and hospitalisation"
format: 
  html:
    self-contained: true
    page-layout: full
editor: source
date: today
date-format: short
theme: flatly

---

---
title-block-banner: true
---

```{css, echo=FALSE}

.centered {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
```


```{r setup}
#| include: false

########################### INSTRUCTIONS ##########################
# 1. Place in a same folder, this script, your csv aggregated data and the shape file EHDS2_pilot_UC1_nuts_code.shp
# 2. Set the working directory to the location of this script
# Filenames of aggregated data should not have been modified otherwise the script will not recognize them.

filename <- "EHDS2_pilot_UC1_data_%s.csv"
shapefile_path <- "EHDS2_pilot_UC1_nuts_code.shp"

# 4. Execute the script to generate an HTML interactive report.
# Do Not modify any line of this script



##### Script ######
# version date: 23-10-24
script_version <- "1.8"

library(tidyverse)
library(ggplot2)
library(plotly)
library(DT)
library(sf)
library(leaflet)
library(writexl)

data_types <- c(
  RQ = "character",
  n = "integer",
  range1 = "numeric",
  range2 = "numeric",
  range3 = "numeric",
  ratio = "numeric",
  education_level_cd = "character",
  income_category_cd = "character",
  household_type_cd = "character",
  migration_background_cd = "character",
  q1 = "numeric",
  median = "numeric",
  mean = "numeric",
  q3 = "numeric",
  sd = "numeric",
  lowerfence = "numeric",
  upperfence = "numeric",
  age_cd = "character",
  sex_cd = "character",
  residence_area_nuts2_cd = "character",
  residence_area_cd = "character",
  residence_area_lau_cd = "character",
  hospi_due_to_covid_bl = "logical",
  fully_vaccinated_bl = "logical",
  country = "character"
)


# List of countries
countries <- c("BE", "FR", "DK", "HR", "HU", "FI")
country_fullnames <- c("Belgium", "France", "Denmark", "Croatia", "Hungary", "Finland")
names(country_fullnames) <- countries
country <- ''

# Loop through each country and check for file presence
for (cntry in countries) {
  filename_path <- sprintf(filename, cntry)
  if (file.exists(filename_path)) {
    cat(sprintf("File for country %s exists. Reading file...\n", cntry))
    df <- read.csv(filename_path, header = TRUE, 
                   sep = " ", 
                   fileEncoding = "UTF-8", 
                   na = "NA",
                   colClasses = data_types)
    country <- cntry
    country_fullname <- toupper(country_fullnames[country])

  }
}


# Import spatial data
nuts_shape <- st_read(shapefile_path)

nuts_shape <- nuts_shape %>% filter(CNTR_CODE == country)

if (country == 'BE') {
nuts_shape <- nuts_shape %>%
  mutate(NUTS_NAME = ifelse(NUTS_NAME == 'Région de Bruxelles-Capitale/ Brussels Hoofdstedelijk Gewest',
                            'Région de Bruxelles-Capitale', 
                            NUTS_NAME),
         NUTS_NAME = ifelse(NUTS_NAME == 'Arr. de Bruxelles-Capitale/Arr. Brussel-Hoofdstad',
                            'Arr. de Bruxelles-Capitale', 
                            NUTS_NAME))
}

# get tresholded data
# retrieve excluded groups
df_excluded <- df %>% 
  filter(n == -1 | range1 == -1 | range2 == -1 | range3 == -1) %>% 
  mutate(n = ifelse(n == -1, "Excluded", n),
         range1 = ifelse(range1 == -1, "Excluded", range1),
         range2 = ifelse(range2 == -1, "Excluded", range2),
         range3 = ifelse(range3 == -1, "Excluded", range3))

df <- df %>% mutate(n = ifelse(n == -1, NA, n),
                    range1 = ifelse(range1 == -1, NA, range1),
                    range2 = ifelse(range2 == -1, NA, range2),
                    range3 = ifelse(range3 == -1, NA, range3))

groups_excluded <- count(df_excluded)[1, 1, drop = TRUE]

var_stat <- c("lowerfence", "q1", "mean", "median", "q3", "upperfence", "sd", "n")

#xlabel order
plotOrderEducation <- c('Low', 'Middle', 'High')
plotOrderIncome <- c('Low', 'Middle', 'High')
plotOrderMigration <- c('NATIVE', 'EU', 'NON-EU')
plotOrderHousehold <- c("ALONE", "COUPLE", "COUPLE_CHILD", "LONE", "EXTENDED", "OTHER")
plotOrderAge <- c("18-25", "25-35", "35-45", "45-55", "55-65", "65-75", "75-85", "85-95", "95-105", "105-115")
plotOrderSex <- c("F", "M")
# template for graphs


barplot_general_metrics <- function(data,
                            y_var,
                            plot_title = "Dynamic Analysis by Group",
                            x_label = "Group",
                            y_label = NULL,  # Dynamic based on selected Y-axis
                            plot_title_font = list(family = "Arial", size = 16, color = "#333333"),
                            x_label_font = list(family = "Arial", size = 16, color = "#333333"),
                            y_label_font = list(family = "Arial", size = 16, color = "#333333"),
                            legend_title = NULL,
                            legend_font = list(family = "Arial", size = 16, color = "#333333"),
                            legend_position = "bottom",
                            x_axis_order = NULL) {
  
  # Set dynamic y_label based on the selected Y-axis
  if (is.null(y_label)) {
    y_label <- y_var
  }

  # Create the plotly bar chart
  plot <- plot_ly(data,
                  type = 'bar',
                  x = ~Group,  # Fixed X-axis to Group
                  y = ~get(y_var),  # Dynamic Y-axis based on selected column
                  mode = 'markers',
                  text = ~Group,  # Tooltip showing group names
                  hoverinfo = 'text+y') %>%
    layout(
      title = list(text = plot_title, font = plot_title_font),
      xaxis = list(title = x_label,
                   titlefont = x_label_font,
                   type = "category",
                   categoryorder = "array",
                   categoryarray = x_axis_order),
      yaxis = list(title = y_label, titlefont = y_label_font, tickformat = ",.0%", hoverformat = ".2f"),
      legend = list(title = list(text = legend_title), font = legend_font, orientation = legend_position),
      hovermode = 'closest'
    )
  
  return(plot)
}



boxplot_custom_group <- function(data, 
                           x_var, 
                           x_label, 
                           y_label, 
                           plot_title, 
                           plot_title_font = list(family = "Arial", size = 16, color = "#333333"),
                           x_label_font = list(family = "Arial", size = 16, color = "#333333"),
                           y_label_font = list(family = "Arial", size = 16, color = "#333333"),
                           legend_font = list(family = "Arial", size = 16, color = "#333333"),
                           legend_position = "bottom",
                           x_axis_order = NULL) {
  plot <- plot_ly(data, 
                  type = 'box', 
                  x = ~get(x_var), 
                  color = ~data[['type']],
                  lowerfence = ~lowerfence, 
                  q1 = ~q1, 
                  mean = ~mean,
                  median = ~median, 
                  q3 = ~q3, 
                  upperfence = ~upperfence) %>%
    layout(title = list(text = plot_title, font = plot_title_font),
           xaxis = list(title = x_label, titlefont = x_label_font, 
                        type = "category", 
                        categoryorder = "array", 
                        categoryarray = x_axis_order),
           yaxis = list(title = y_label, titlefont = y_label_font),
           legend = list(font = legend_font, orientation = legend_position),
           # plot_bgcolor = 'rgba(233, 233, 233, 0.3)',
           boxmode = "group") # Light background for plot area
  
  return(plot)
}




barplot_custom <- function(data,
                           x_var,
                           y_var,
                           x_label,
                           y_label,
                           plot_title,
                           plot_title_font = list(family = "Arial", size = 16, color = "#333333"),
                           x_label_font = list(family = "Arial", size = 16, color = "#333333"),
                           y_label_font = list(family = "Arial", size = 16, color = "#333333"),
                           legend_title,
                           legend_font = list(family = "Arial", size = 16, color = "#333333"),
                           legend_position = "bottom",
                           x_axis_order = NULL) {
  plot <- plot_ly(data,
                  type = 'bar',
                  x = ~get(x_var),
                  color = ~get(x_var),
                  y = ~get(y_var)) %>%
    layout(title = list(text = plot_title, font = plot_title_font),
           xaxis = list(title = x_label, titlefont = x_label_font,
                        type = "category",
                        categoryorder = "array",
                        categoryarray = x_axis_order),
           yaxis = list(title = y_label, titlefont = y_label_font, tickformat = ",.0%", hoverformat = ".2%"),
           legend = list(title = list(text = legend_title), font = legend_font, orientation = legend_position),
           hovermode = 'closest')

  return(plot)
}


barplot_stacked_custom_q4 <- function(data,
                           x_var,
                           y_var,
                           group_var = NULL, # New argument for grouping within the x-axis categories
                           x_label,
                           y_label,
                           plot_title,
                           plot_title_font = list(family = "Arial", size = 16, color = "#333333"),
                           x_label_font = list(family = "Arial", size = 16, color = "#333333"),
                           y_label_font = list(family = "Arial", size = 16, color = "#333333"),
                           legend_title,
                           legend_font = list(family = "Arial", size = 16, color = "#333333"),
                           legend_position = "bottom",
                           x_axis_order = NULL,
                           barmode = 'stack', # New argument to specify bar mode: 'group' (default) or 'stack'
                           color_palette = 'Viridis' # Optional argument to specify color palette
) {
  # Basic plot setup
  plot <- plot_ly(data, type = 'bar')
  
  # Conditional setup if group_var is specified
  if (!is.null(group_var)) {
    plot <- plot %>%
      add_bars(x = ~get(x_var), y = ~get(y_var), color = ~get(group_var), colors = color_palette)
  } else {
    plot <- plot %>%
      add_bars(x = ~get(x_var), y = ~get(y_var))
  }
  
  # Additional plot settings
  plot <- plot %>%
    layout(title = list(text = plot_title, font = plot_title_font),
           xaxis = list(title = x_label, titlefont = x_label_font,
                        type = "category",
                        categoryorder = "array",
                        categoryarray = x_axis_order),
           yaxis = list(title = y_label, titlefont = y_label_font, tickformat = ",.0%", hoverformat = ".2%"),
           barmode = barmode, # Apply barmode setting
           legend = list(title = list(text = legend_title), font = legend_font, orientation = legend_position),
           hovermode = 'closest')
  
  return(plot)
}


barplot_grouped_custom1 <- function(data1, x_var1, y_var1,
                                    data2, x_var2, y_var2,
                                    data3, x_var3, y_var3,
                                    x_label, 
                                    y_label,
                                    plot_title, 
                                    x_axis_order,
                                    plot_title_font = list(family = "Arial", size = 16, color = "#333333"),
                                    x_label_font = list(family = "Arial", size = 16, color = "#333333"),
                                    y_label_font = list(family = "Arial", size = 16, color = "#333333"),
                                    x_axis_font = list(family = "Arial", size = 16, color = "#333333"), 
                                    legend_title,
                                    legend_font = list(family = "Arial", size = 16, color = "#333333"),
                                    legend_position = "bottom",
                                    color_palette = 'Viridis') {
  plot_ly() %>%
    add_bars(data = data1 %>% filter(hospi_due_to_covid_bl == TRUE), 
             x = as.formula(paste("~", x_var1)), 
             y = as.formula(paste("~", y_var1)), 
             name = "All",
             marker = list(color = color_palette[1])) %>%
    add_bars(data = data2 %>% filter(hospi_due_to_covid_bl == TRUE), 
             x = as.formula(paste("~", x_var2)), 
             y = as.formula(paste("~", y_var2)), 
             name = "Vaccinated cohort",
             marker = list(color = color_palette[2])) %>%
    add_bars(data = data3 %>% filter(hospi_due_to_covid_bl == TRUE), 
             x = as.formula(paste("~", x_var3)), 
             y = as.formula(paste("~", y_var3)), 
             name = "Unvaccinated cohort",
             marker = list(color = color_palette[3])) %>%
    layout(title = list(text = plot_title, font = plot_title_font),
           xaxis = list(title = x_label, titlefont = x_label_font,
                        tickfont = x_axis_font,
                        type = "category",
                        categoryorder = "array",
                        categoryarray = x_axis_order),
           yaxis = list(title = y_label, titlefont = y_label_font, 
                        tickformat = ",.0%",  # Formats y-axis values as percentages
                        hoverformat = ".2%"),  # Format hover text as percentages
           barmode = 'group',
           legend = list(title = list(text = legend_title), font = legend_font, orientation = legend_position),
           hovermode = 'closest')
}



choropleth_map <- function(dataRQ, 
                           color, 
                           groupBy,
                           subdata, 
                           variable,
                           title, 
                           legend, 
                           is_percentage = TRUE) {  # Add the new argument
  
  # Filter out NA and Inf values to determine the valid range for the color palette
  valid_values <- dataRQ[[variable]][!is.na(dataRQ[[variable]]) & !is.infinite(dataRQ[[variable]])]
  
  # If there are no valid values, set a default range
  if (length(valid_values) == 0) {
    valid_values <- c(0, 1)
  }
  
  custom_palette <- colorNumeric(palette = color, domain = valid_values, na.color = "lightgrey")
  
  map <- leaflet(dataRQ) %>%
    addProviderTiles(providers$CartoDB.Positron)
  
  if (is.null(subdata) || length(subdata) == 0) {
    map <- map %>%
      addPolygons(data = dataRQ, 
                  fillColor = ~custom_palette(get(variable)), 
                  fillOpacity = 0.7,
                  weight = 1, 
                  opacity = 1, 
                  dashArray = "5, 5", 
                  color = "white", 
                  smoothFactor = 0.5,
                  label = ~paste(
                    "<div style='font-size:14px;'>",  # Increase font size here
                    "ID: ", NUTS_ID, "<br/>",
                    "Name:<span style='color: green; font-weight: bold;'>", NUTS_NAME, "</span><br/>",
                    "n: ", n, "<br/>",
                    title, ":<span style='color: black; font-weight: bold;'>", 
                    round(get(variable), 2), 
                    ifelse(is_percentage, "%", ""),  # Conditional suffix
                    "</span><br/>",
                    "</div>"
                  ) %>% lapply(htmltools::HTML))
    
  } else {
    for (group in subdata) {
      filtered_data <- dataRQ %>% filter(get(groupBy) == group)
      map <- map %>%
        addPolygons(data = filtered_data,
                    fillColor = ~custom_palette(get(variable)),
                    fillOpacity = 0.7,
                    weight = 1,
                    opacity = 1,
                    dashArray = "5, 5",
                    color = "white",
                    smoothFactor = 0.5,
                    label = ~paste(
                      "<div style='font-size:14px;'>",  # Increase font size here
                      "ID: ", NUTS_ID, "<br/>",
                      "Name: <span style='color: green; font-weight: bold;'>", NUTS_NAME, "</span><br/>",
                      "n: ", n, "<br/>",
                      group, ":<span style='color: black; font-weight: bold;'>", 
                      round(get(variable), 2), 
                      ifelse(is_percentage, "%", ""),  # Conditional suffix
                      "</span><br/>",
                      "</div>"
                    ) %>% lapply(htmltools::HTML),
                    group = group)
    }
  }
  
  # Add legend with conditional suffix
  map <- map %>%
    addLegend(
      position = "bottomright",
      pal = custom_palette,
      values = ~dataRQ[[variable]][!is.na(dataRQ[[variable]])],
      title = legend,
      labFormat = labelFormat(suffix = ifelse(is_percentage, "%", "")),  # Conditional label format for suffix
      opacity = 1
    )
  
  # Add layers control if groupBy is provided
  if (!is.null(groupBy)) {
    map <- map %>%
      addLayersControl(baseGroups = subdata,
                       options = layersControlOptions(collapsed = FALSE))
  }
  
  return(map)
}


# Extract cohort info
dataset_info <- df %>% filter(RQ == "dataset_info") %>% select(n, range1, range2, range3)
individuals_nm <- dataset_info[1, 1, drop = TRUE]
individuals_vaccinated_nm <- dataset_info[1, 2, drop = TRUE]
individuals_not_vaccinated_nm <- dataset_info[1, 3, drop = TRUE]
threshold <- dataset_info[1, 4, drop = TRUE]

dataset_info2 <- df %>% filter(RQ == "dataset_info2") %>% 
  select(range1, range2, education_level_cd, income_category_cd)
age_min <- dataset_info2[1, 1, drop = TRUE]
age_max <- dataset_info2[1, 2, drop = TRUE]
date_from <- as.Date(dataset_info2[1, 3, drop = TRUE])
date_to <- as.Date(dataset_info2[1, 4, drop = TRUE])


# Glogal metrics calculation and formatting

# Function to extract and append rows for any group summary based on RQ label
extract_group_summary <- function(rq_df, rq_label, cohort_label) {
  # Extract the row for the specific cohort
  dataset_info_group_row <- rq_df %>%
    filter(RQ == rq_label) %>%
    pull(country)
  
  # Split the values by ";"
  extracted_values_group <- unlist(strsplit(dataset_info_group_row, ";"))
  
  # Create a dataframe for the cohort
  data.frame(
    cohort = cohort_label,
    count = extracted_values_group[1],
    
    # Age-related fields
    avg_age = extracted_values_group[2],
    median_age = extracted_values_group[3],
    sd_age = extracted_values_group[4],  # SD for age
    iqr_age = extracted_values_group[5],  # IQR for age
    
    # Test-related fields
    individuals_with_tests = extracted_values_group[6],
    avg_test_nm = extracted_values_group[7],
    median_test_nm = extracted_values_group[8],
    sd_test_nm = extracted_values_group[9],  # SD for tests
    iqr_test_nm = extracted_values_group[10],  # IQR for tests
    
    # Positive Test-related fields
    individuals_with_tests_positive = extracted_values_group[11],
    avg_test_positives_nm = extracted_values_group[12],
    median_test_positives_nm = extracted_values_group[13],
    sd_test_positives_nm = extracted_values_group[14],  # SD for positive tests
    iqr_test_positives_nm = extracted_values_group[15],  # IQR for positive tests
    
    # Vaccine-related fields
    individuals_with_vaccine = extracted_values_group[16],
    avg_dose_nm = extracted_values_group[17],
    median_dose_nm = extracted_values_group[18],
    sd_dose_nm = extracted_values_group[19],  # SD for doses
    iqr_dose_nm = extracted_values_group[20],  # IQR for doses
    
    # Vaccination and hospitalization rates
    fully_vaccinated_count = extracted_values_group[21],
    vaccination_rate = extracted_values_group[22],
    hospitalised_true = extracted_values_group[23],
    hospitalisation_rate = extracted_values_group[24],
    
    stringsAsFactors = FALSE
  )
}



# Extract all rows from rq where RQ starts with 'dataset_info_'
rq_labels <- df %>%
  filter(grepl("^dataset_info_", RQ)) %>%
  pull(RQ)

# Create an empty list to store the results
results_list <- list()

# Loop through all the matching rq_labels and extract their values
for (label in rq_labels) {
  # Remove the "dataset_info_" prefix
  cohort_label <- gsub("dataset_info_", "", label)
  
  # Check if the label starts with "age_cd_" and replace it with "Age group :"
  if (grepl("^age_cd_", cohort_label)) {
    cohort_label <- gsub("age_cd_", "Age: ", cohort_label)

  } else if (grepl("^all", cohort_label)) {
    cohort_label <- gsub("all", "Entire Cohort", cohort_label)
    
  # Check if the label starts with "sex_cd_" and replace with "Male" or "Female"
  } else if (grepl("^sex_cd_", cohort_label)) {
    cohort_label <- gsub("sex_cd_M", "Male", cohort_label)
    cohort_label <- gsub("sex_cd_F", "Female", cohort_label)
  
  } else if (grepl("^education_level_cd_", cohort_label)) {
    cohort_label <- gsub("education_level_cd_", "Education: ", cohort_label)

  } else if (grepl("^income_category_cd_", cohort_label)) {
    cohort_label <- gsub("income_category_cd_", "Income: ", cohort_label)

  } else if (grepl("^migration_background_cd_", cohort_label)) {
    cohort_label <- gsub("migration_background_cd_", "Migration: ", cohort_label)

  } else if (grepl("^household_type_cd_", cohort_label)) {
    cohort_label <- gsub("household_type_cd_", "Household: ", cohort_label)

  } else if (grepl("^residence_area_nuts2_cd_", cohort_label)) {
    nuts_code <- gsub("residence_area_nuts2_cd_", "", cohort_label)
    
    # Look up the NUTS name from rq1_2_area_nuts2 based on the nuts_code
    nuts_name <- nuts_shape %>%
      filter(NUTS_ID == nuts_code) %>%
      pull(NUTS_NAME)
    
    # Replace with the actual name
    cohort_label <- paste("Residence: ", nuts_name)
    
  }
  
  # Now use the adapted cohort_label
  summary_df <- extract_group_summary(df, label, cohort_label)

  results_list[[label]] <- summary_df  # Store the result in the list
}

# Combine all extracted dataframes into one
global_metrics_df <- do.call(bind_rows, results_list)

# Rename columns to make them more human-readable
colnames(global_metrics_df) <- c(
  "Group",                    # cohort
  "n",                        # count
  
  # Age-related fields
  "Avg Age",                  # avg_age
  "Median Age",               # median_age
  "Age SD",                   # sd_age (Standard Deviation)
  "Age IQR",                  # iqr_age (Interquartile Range)
  
  # Test-related fields
  "Tested",                   # individuals_with_tests
  "Avg Tests",                # avg_test_nm
  "Median Tests",             # median_test_nm
  "Tests SD",                 # sd_test_nm (Standard Deviation)
  "Tests IQR",                # iqr_test_nm (Interquartile Range)
  
  # Positive Test-related fields
  "Tested Positive",          # individuals_with_tests_positive
  "Avg Positive Tests",       # avg_test_positives_nm
  "Median Positive Tests",    # median_test_positives_nm
  "Positive Tests SD",        # sd_test_positives_nm (Standard Deviation)
  "Positive Tests IQR",       # iqr_test_positives_nm (Interquartile Range)
  
  # Vaccine-related fields
  "Vaccinated (1+ Dose)",     # individuals_with_vaccine
  "Avg Doses",                # avg_dose_nm
  "Median Doses",             # median_dose_nm
  "Doses SD",                 # sd_dose_nm (Standard Deviation)
  "Doses IQR",                # iqr_dose_nm (Interquartile Range)
  
  # Vaccination and hospitalization rates
  "Fully Vaccinated",         # fully_vaccinated_count
  "Vaccination Rate (%)",     # vaccination_rate
  "COVID-19 Hospitalised",    # hospitalised_true
  "Hospitalisation Rate (%)"  # hospitalisation_rate
)


rq1_summary <- df %>% 
  filter(RQ == "rq1_summary" & 
           !is.na(education_level_cd) &
           !is.na(income_category_cd) &
           !is.na(household_type_cd) &
           !is.na(migration_background_cd)) %>% 
  mutate(type = 'All') %>%
  select(type,
         education_level_cd, 
         income_category_cd, 
         household_type_cd, 
         migration_background_cd,
         var_stat)

rq2_summary <- df %>% 
  filter(RQ == "rq2_summary" & 
           !is.na(education_level_cd) &
           !is.na(income_category_cd) &
           !is.na(household_type_cd) &
           !is.na(migration_background_cd)) %>% 
  mutate(type = 'Positives') %>%
  select(type,
         education_level_cd, 
         income_category_cd, 
         household_type_cd, 
         migration_background_cd,
         var_stat)


rq1_2_summary <- full_join(rq1_summary, rq2_summary)

rq1_2_distribution <- df %>% 
  filter(RQ %in% c("rq1_distribution", "rq2_distribution") & 
           !is.na(ratio)) %>% 
  mutate(tests = ifelse(RQ == "rq1_distribution", 'All', 'Positives'),
         test_number = range1,
         percentage = ratio) %>%
  select(tests, test_number, n, ratio, percentage) %>% 
  group_by(tests)

rq1_2_education_aggreg <- df %>% 
  filter(RQ %in% c("rq1_education_level_cd", "rq2_education_level_cd") & 
           !is.na(education_level_cd)) %>% 
  mutate(type = ifelse(RQ == "rq1_education_level_cd", 'All', 'Positives')) %>%
  select(type, education_level_cd, var_stat) %>% 
  group_by(education_level_cd, type)

rq1_2_income_aggreg <- df %>%
  filter(RQ %in% c("rq1_income_category_cd", "rq2_income_category_cd") & 
           !is.na(income_category_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_income_category_cd", 'All', 'Positives')) %>%
  select(type, income_category_cd, var_stat) %>%
  group_by(income_category_cd, type)

rq1_2_migration_aggreg <- df %>%
  filter(RQ %in% c("rq1_migration_background_cd", "rq2_migration_background_cd") & 
           !is.na(migration_background_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_migration_background_cd", 'All', 'Positives')) %>%
  select(type, migration_background_cd, var_stat) %>%
  group_by(migration_background_cd, type)

rq1_2_household_aggreg <- df %>%
  filter(RQ %in% c("rq1_household_type_cd", "rq2_household_type_cd") & 
           !is.na(household_type_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_household_type_cd", 'All', 'Positives')) %>%
  select(type, household_type_cd, var_stat) %>%
  group_by(household_type_cd, type)

rq1_2_age_group <- df %>%
  filter(RQ %in% c("rq1_age_cd", "rq2_age_cd") & 
           !is.na(age_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_age_cd", 'All', 'Positives')) %>%
  select(type, age_cd, var_stat) %>%
  group_by(age_cd, type)

rq1_2_sex <- df %>%
  filter(RQ %in% c("rq1_sex_cd", "rq2_sex_cd") & sex_cd %in% c("M", "F") & 
           !is.na(sex_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_sex_cd", 'All', 'Positives')) %>%
  select(type, sex_cd, var_stat) %>%
  group_by(sex_cd, type)

rq1_2_area <- df %>%
  filter(RQ %in% c("rq1_residence_area_nuts2_cd", 
                   "rq1_residence_area_cd", 
                   "rq1_residence_area_lau_cd",
                   "rq2_residence_area_nuts2_cd", 
                   "rq2_residence_area_cd", 
                   "rq2_residence_area_lau_cd")) %>%
  mutate(type = ifelse(RQ %in% c("rq1_residence_area_nuts2_cd", 
                                 "rq1_residence_area_cd", 
                                 "rq1_residence_area_lau_cd"), 'All', 'Positives')) %>%
  select(type, residence_area_nuts2_cd, residence_area_cd, residence_area_lau_cd, var_stat)


rq1_2_education_tests <- df %>% 
  filter(RQ %in% c("rq1_education_level_cd_test", "rq2_education_level_cd_positive_test") & 
           !is.na(education_level_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_education_level_cd_test", "All", "Positives")) %>%
  group_by(education_level_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(education_level_cd, type, tests, value, n, nGroup)

rq1_2_income_tests <- df %>% 
  filter(RQ %in% c("rq1_income_category_cd_test", "rq2_income_category_cd_positive_test") & 
           !is.na(income_category_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_income_category_cd_test", "All", "Positives")) %>%
  group_by(income_category_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(income_category_cd, type, tests, value, n, nGroup)


rq1_2_household_tests <- df %>% 
  filter(RQ %in% c("rq1_household_type_cd_test", "rq2_household_type_cd_positive_test") & 
           !is.na(household_type_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_household_type_cd_test", "All", "Positives")) %>%
  group_by(household_type_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(household_type_cd, type, tests, value, n, nGroup)


rq1_2_migration_tests <- df %>% 
  filter(RQ %in% c("rq1_migration_background_cd_test", "rq2_migration_background_cd_positive_test") & 
           !is.na(migration_background_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_migration_background_cd_test", "All", "Positives")) %>%
  group_by(migration_background_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(migration_background_cd, type, tests, value, n, nGroup)


rq1_2_age_tests <- df %>% 
  filter(RQ %in% c("rq1_age_cd_test", "rq2_age_cd_positive_test") & 
           !is.na(age_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_age_cd_test", "All", "Positives")) %>%
  group_by(age_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(age_cd, type, tests, value, n, nGroup)


rq1_2_sex_tests <- df %>% 
  filter(RQ %in% c("rq1_sex_cd_test", "rq2_sex_cd_positive_test") & 
           sex_cd %in% c("M", "F") & 
           !is.na(sex_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_sex_cd_test", "All", "Positives")) %>%
  group_by(sex_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(sex_cd, type, tests, value, n, nGroup)




rq1_2_area_nuts2_tests <- df %>% 
  filter(RQ %in% c("rq1_residence_area_nuts2_cd_test", 
                   "rq2_residence_area_nuts2_cd_positive_test") & 
           !is.na(residence_area_nuts2_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_residence_area_nuts2_cd_test", "All", "Positives")) %>%
  group_by(residence_area_nuts2_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(residence_area_nuts2_cd, type, tests, value, n, nGroup)


rq1_2_area_nuts3_tests <- df %>% 
  filter(RQ %in% c("rq1_residence_area_cd_test", 
                   "rq2_residence_area_cd_positive_test") & 
           !is.na(residence_area_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_residence_area_cd_test", "All", "Positives")) %>%
  group_by(residence_area_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(residence_area_cd, type, tests, value, n, nGroup)


rq1_2_area_lau2_tests <- df %>% 
  filter(RQ %in% c("rq1_residence_area_lau_cd_test", 
                   "rq2_residence_area_lau_cd_positive_test") & 
           !is.na(residence_area_lau_cd)) %>%
  mutate(type = ifelse(RQ == "rq1_residence_area_lau_cd_test", "All", "Positives")) %>%
  group_by(residence_area_lau_cd) %>%
  crossing(tests = c("0", "1 to 5", "more than 5")) %>%
  mutate(nGroup = n,
         n = ifelse(tests == "0", range1,
                    ifelse(tests == "1 to 5", range2,
                           ifelse(tests == "more than 5", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(residence_area_lau_cd, type, tests, value, n, nGroup)


### RQ3
rq3_general <- df %>% 
  filter(RQ == 'rq3_4_general') %>%
  group_by(fully_vaccinated_bl) %>%
  summarise(n = sum(n)) %>%
  mutate(ratio = n / individuals_nm)


rq3_summary <- df %>% 
  filter(RQ == "rq3_summary") %>% 
  select(education_level_cd, 
         income_category_cd, 
         household_type_cd, 
         migration_background_cd,
         range1,
         n) %>%
  mutate(ratio = range1 / n,
         ratio2 = range1 / individuals_nm,
         n = range1) %>%
  select(-range1)


rq3_distribution <- df %>% 
  filter(RQ %in% c("rq3_distribution") & 
           !is.na(ratio)) %>% 
  mutate(dose_number = range1,
         percentage = ratio) %>%
  select(dose_number, n, ratio, percentage)


# rq3 education
rq3_education_aggreg <- df %>%
  filter(RQ == "rq3_education_level_cd") %>%
  group_by(education_level_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_education_level_cd") %>%
  group_by(education_level_cd) %>% 
  summarise(nGroup = sum(n))

rq3_education_aggreg <- left_join(rq3_education_aggreg, group)

rm(group)

rq3_education_aggreg <- rq3_education_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)


# rq3 income
rq3_income_aggreg <- df %>%
  filter(RQ == "rq3_income_category_cd") %>%
  group_by(income_category_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_income_category_cd") %>%
  group_by(income_category_cd) %>% 
  summarise(nGroup = sum(n))

rq3_income_aggreg <- left_join(rq3_income_aggreg, group)

rm(group)

rq3_income_aggreg <- rq3_income_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)


# rq3 migration
rq3_migration_aggreg <- df %>%
  filter(RQ == "rq3_migration_background_cd") %>%
  group_by(migration_background_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_migration_background_cd") %>%
  group_by(migration_background_cd) %>% 
  summarise(nGroup = sum(n))

rq3_migration_aggreg <- left_join(rq3_migration_aggreg, group)

rm(group)

rq3_migration_aggreg <- rq3_migration_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)

# rq3 household
rq3_household_aggreg <- df %>%
  filter(RQ == "rq3_household_type_cd") %>%
  group_by(household_type_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_household_type_cd") %>%
  group_by(household_type_cd) %>% 
  summarise(nGroup = sum(n))

rq3_household_aggreg <- left_join(rq3_household_aggreg, group)

rm(group)

rq3_household_aggreg <- rq3_household_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)


# rq3 age
rq3_age_aggreg <- df %>%
  filter(RQ == "rq3_age_cd") %>%
  group_by(age_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_age_cd") %>%
  group_by(age_cd) %>% 
  summarise(nGroup = sum(n))

rq3_age_aggreg <- left_join(rq3_age_aggreg, group)

rm(group)

rq3_age_aggreg <- rq3_age_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)



# rq3 sex
rq3_sex_aggreg <- df %>%
  filter(RQ == "rq3_sex_cd") %>%
  group_by(sex_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_sex_cd") %>%
  group_by(sex_cd) %>% 
  summarise(nGroup = sum(n))

rq3_sex_aggreg <- left_join(rq3_sex_aggreg, group)

rm(group)

rq3_sex_aggreg <- rq3_sex_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)


# rq3 area_nuts2
rq3_area_nuts2_aggreg <- df %>%
  filter(RQ == "rq3_residence_area_nuts2_cd") %>%
  group_by(residence_area_nuts2_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_residence_area_nuts2_cd") %>%
  group_by(residence_area_nuts2_cd) %>% 
  summarise(nGroup = sum(n))

rq3_area_nuts2_aggreg <- left_join(rq3_area_nuts2_aggreg, group)

rm(group)

rq3_area_nuts2_aggreg <- rq3_area_nuts2_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)



# rq3 area_nuts3
rq3_area_nuts3_aggreg <- df %>%
  filter(RQ == "rq3_residence_area_cd") %>%
  group_by(residence_area_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_residence_area_cd") %>%
  group_by(residence_area_cd) %>% 
  summarise(nGroup = sum(n))

rq3_area_nuts3_aggreg <- left_join(rq3_area_nuts3_aggreg, group)

rm(group)

rq3_area_nuts3_aggreg <- rq3_area_nuts3_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)


# rq3 area_lau2
rq3_area_lau2_aggreg <- df %>%
  filter(RQ == "rq3_residence_area_lau_cd") %>%
  group_by(residence_area_lau_cd,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq3_residence_area_lau_cd") %>%
  group_by(residence_area_lau_cd) %>% 
  summarise(nGroup = sum(n))

rq3_area_lau2_aggreg <- left_join(rq3_area_lau2_aggreg, group)

rm(group)

rq3_area_lau2_aggreg <- rq3_area_lau2_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm)


rq3_education_doses <- df %>% 
  filter(RQ == "rq3_education_level_cd_doses" & !is.na(education_level_cd)) %>% 
  select(education_level_cd, range1, range2, range3, n) %>% 
  group_by(education_level_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(education_level_cd, doses, value, n, nGroup)


rq3_income_doses <- df %>% 
  filter(RQ == "rq3_income_category_cd_doses" & !is.na(income_category_cd)) %>% 
  select(income_category_cd, range1, range2, range3, n) %>% 
  group_by(income_category_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(income_category_cd, doses, value, n, nGroup)

rq3_household_doses <- df %>% 
  filter(RQ == "rq3_household_type_cd_doses" & !is.na(household_type_cd)) %>% 
  select(household_type_cd, range1, range2, range3, n) %>% 
  group_by(household_type_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(household_type_cd, doses, value, n, nGroup)

rq3_migration_doses <- df %>% 
  filter(RQ == "rq3_migration_background_cd_doses" & !is.na(migration_background_cd)) %>% 
  select(migration_background_cd, range1, range2, range3, n) %>% 
  group_by(migration_background_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(migration_background_cd, doses, value, n, nGroup)


rq3_age_doses <- df %>% 
  filter(RQ == "rq3_age_cd_doses" & !is.na(age_cd)) %>% 
  select(age_cd, range1, range2, range3, n) %>% 
  group_by(age_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(age_cd, doses, value, n, nGroup)


rq3_sex_doses <- df %>% 
  filter(RQ == "rq3_sex_cd_doses" & sex_cd %in% c("M", "F") & !is.na(sex_cd)) %>% 
  select(sex_cd, range1, range2, range3, n) %>% 
  group_by(sex_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(sex_cd, doses, value, n, nGroup)


rq3_area_nuts2_doses <- df %>% 
  filter(RQ == "rq3_residence_area_nuts2_cd_doses" & !is.na(residence_area_nuts2_cd)) %>% 
  select(residence_area_nuts2_cd, range1, range2, range3, n) %>% 
  group_by(residence_area_nuts2_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(residence_area_nuts2_cd, doses, value, n, nGroup)



rq3_area_nuts3_doses <- df %>% 
  filter(RQ == "rq3_residence_area_cd_doses" & !is.na(residence_area_cd)) %>% 
  select(residence_area_cd, range1, range2, range3, n) %>% 
  group_by(residence_area_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(residence_area_cd, doses, value, n, nGroup)


rq3_area_lau2_doses <- df %>% 
  filter(RQ == "rq3_residence_area_lau_cd_doses" & !is.na(residence_area_lau_cd)) %>% 
  select(residence_area_lau_cd, range1, range2, range3, n) %>% 
  group_by(residence_area_lau_cd) %>%
  crossing(doses = c("0", "1", "2 or more")) %>%
  mutate(nGroup = n,
         n = ifelse(doses == "0", range1,
                    ifelse(doses == "1", range2,
                           ifelse(doses == "2 or more", range3, NA)))) %>%
  select(-range1, -range2, -range3) %>%
  mutate(value = n/nGroup) %>%
  select(residence_area_lau_cd, doses, value, n, nGroup)




# rq4 summary
rq4_general <- df %>% 
  filter(RQ == 'rq3_4_general') %>%
  group_by(hospi_due_to_covid_bl) %>%
  summarise(n = sum(n)) %>%
  mutate(ratio = n / individuals_nm)

rq4_general2 <- df %>% 
  filter(RQ == 'rq3_4_general',
         fully_vaccinated_bl == TRUE) %>%
  group_by(hospi_due_to_covid_bl) %>%
  summarise(n = sum(n)) %>%
  mutate(ratio = n / individuals_vaccinated_nm)

rq4_summary <- df %>% 
  filter(RQ == "rq4_summary") %>% 
  select(education_level_cd, 
         income_category_cd, 
         household_type_cd, 
         migration_background_cd,
         hospi_due_to_covid_bl,
         fully_vaccinated_bl,
         n) %>%
    mutate(ratio = n / individuals_nm)


rq4_education_aggreg <- df %>%
  filter(RQ == "rq4_education_level_cd") %>%
  group_by(education_level_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_education_level_cd") %>%
  group_by(education_level_cd) %>% 
  summarise(nGroup = sum(n))

rq4_education_aggreg <- left_join(rq4_education_aggreg, group)

groupVacc <- df %>%
  filter(RQ == "rq4_education_level_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(education_level_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupVacc = sum(n)) 

rq4_education_aggreg <- left_join(rq4_education_aggreg, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_education_level_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(education_level_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupUnVacc = sum(n))

rq4_education_aggreg <- rq4_education_aggreg %>% 
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)

rq4_education_aggreg <- rq4_education_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))

rq4a_education_aggreg <- rq4_education_aggreg %>% 
  select(education_level_cd, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(education_level_cd, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  mutate(cohort = 'All')

rq4b_education_aggreg <- rq4_education_aggreg %>% 
  select(education_level_cd, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_education_aggrega <- rq4b_education_aggreg %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(education_level_cd, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_education_aggregb <- rq4b_education_aggreg %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(education_level_cd, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_education_aggreg <- bind_rows(rq4a_education_aggreg, rq4b_education_aggrega, rq4b_education_aggregb)

rm(rq4a_education_aggreg, rq4b_education_aggreg, rq4b_education_aggrega, rq4b_education_aggregb)



### rq4 income
rq4_income_aggreg <- df %>%
  filter(RQ == "rq4_income_category_cd") %>%
  group_by(income_category_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_income_category_cd") %>%
  group_by(income_category_cd) %>% 
  summarise(nGroup = sum(n))

rq4_income_aggreg <- left_join(rq4_income_aggreg, group)

groupVacc <- df %>%
  filter(RQ == "rq4_income_category_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(income_category_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupVacc = sum(n)) 

rq4_income_aggreg <- left_join(rq4_income_aggreg, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_income_category_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(income_category_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupUnVacc = sum(n))

rq4_income_aggreg <- rq4_income_aggreg %>% 
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)


rq4_income_aggreg <- rq4_income_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))

rq4a_income_aggreg <- rq4_income_aggreg %>% 
  select(income_category_cd, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(income_category_cd, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  mutate(cohort = 'All')

rq4b_income_aggreg <- rq4_income_aggreg %>% 
  select(income_category_cd, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_income_aggrega <- rq4b_income_aggreg %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(income_category_cd, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_income_aggregb <- rq4b_income_aggreg %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(income_category_cd, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_income_aggreg <- bind_rows(rq4a_income_aggreg, rq4b_income_aggrega, rq4b_income_aggregb)

rm(rq4a_income_aggreg, rq4b_income_aggreg, rq4b_income_aggrega, rq4b_income_aggregb)




### rq4 migration
rq4_migration_aggreg <- df %>%
  filter(RQ == "rq4_migration_background_cd") %>%
  group_by(migration_background_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_migration_background_cd") %>%
  group_by(migration_background_cd) %>% 
  summarise(nGroup = sum(n))

rq4_migration_aggreg <- left_join(rq4_migration_aggreg, group)

groupVacc <- df %>%
  filter(RQ == "rq4_migration_background_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(migration_background_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupVacc = sum(n)) 

rq4_migration_aggreg <- left_join(rq4_migration_aggreg, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_migration_background_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(migration_background_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupUnVacc = sum(n))

rq4_migration_aggreg <- rq4_migration_aggreg %>% 
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)


rq4_migration_aggreg <- rq4_migration_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))

rq4a_migration_aggreg <- rq4_migration_aggreg %>% 
  select(migration_background_cd, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(migration_background_cd, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  mutate(cohort = 'All')

rq4b_migration_aggreg <- rq4_migration_aggreg %>% 
  select(migration_background_cd, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_migration_aggrega <- rq4b_migration_aggreg %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(migration_background_cd, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_migration_aggregb <- rq4b_migration_aggreg %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(migration_background_cd, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_migration_aggreg <- bind_rows(rq4a_migration_aggreg, rq4b_migration_aggrega, rq4b_migration_aggregb)

rm(rq4a_migration_aggreg, rq4b_migration_aggreg, rq4b_migration_aggrega, rq4b_migration_aggregb)





### rq4 household
rq4_household_aggreg <- df %>%
  filter(RQ == "rq4_household_type_cd") %>%
  group_by(household_type_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_household_type_cd") %>%
  group_by(household_type_cd) %>% 
  summarise(nGroup = sum(n))

rq4_household_aggreg <- left_join(rq4_household_aggreg, group)

groupVacc <- df %>%
  filter(RQ == "rq4_household_type_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(household_type_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupVacc = sum(n)) 

rq4_household_aggreg <- left_join(rq4_household_aggreg, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_household_type_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(household_type_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupUnVacc = sum(n))

rq4_household_aggreg <- rq4_household_aggreg %>% 
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)


rq4_household_aggreg <- rq4_household_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))

rq4a_household_aggreg <- rq4_household_aggreg %>% 
  select(household_type_cd, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(household_type_cd, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  mutate(cohort = 'All')

rq4b_household_aggreg <- rq4_household_aggreg %>% 
  select(household_type_cd, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_household_aggrega <- rq4b_household_aggreg %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(household_type_cd, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_household_aggregb <- rq4b_household_aggreg %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(household_type_cd, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_household_aggreg <- bind_rows(rq4a_household_aggreg, rq4b_household_aggrega, rq4b_household_aggregb)

rm(rq4a_household_aggreg, rq4b_household_aggreg, rq4b_household_aggrega, rq4b_household_aggregb)




### rq4 age
rq4_age_aggreg <- df %>%
  filter(RQ == "rq4_age_cd") %>%
  group_by(age_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_age_cd") %>%
  group_by(age_cd) %>% 
  summarise(nGroup = sum(n))

rq4_age_aggreg <- left_join(rq4_age_aggreg, group)

groupVacc <- df %>%
  filter(RQ == "rq4_age_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(age_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupVacc = sum(n)) 

rq4_age_aggreg <- left_join(rq4_age_aggreg, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_age_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(age_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupUnVacc = sum(n))

rq4_age_aggreg <- rq4_age_aggreg %>% 
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)


rq4_age_aggreg <- rq4_age_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))

rq4a_age_aggreg <- rq4_age_aggreg %>% 
  select(age_cd, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(age_cd, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  mutate(cohort = 'All')

rq4b_age_aggreg <- rq4_age_aggreg %>% 
  select(age_cd, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_age_aggrega <- rq4b_age_aggreg %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(age_cd, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_age_aggregb <- rq4b_age_aggreg %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(age_cd, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_age_aggreg <- bind_rows(rq4a_age_aggreg, rq4b_age_aggrega, rq4b_age_aggregb)

rm(rq4a_age_aggreg, rq4b_age_aggreg, rq4b_age_aggrega, rq4b_age_aggregb)



### rq4 sex
rq4_sex_aggreg <- df %>%
  filter(RQ == "rq4_sex_cd") %>%
  group_by(sex_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>% 
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_sex_cd") %>%
  group_by(sex_cd) %>% 
  summarise(nGroup = sum(n))

rq4_sex_aggreg <- left_join(rq4_sex_aggreg, group)

groupVacc <- df %>%
  filter(RQ == "rq4_sex_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(sex_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupVacc = sum(n)) 

rq4_sex_aggreg <- left_join(rq4_sex_aggreg, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_sex_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(sex_cd, fully_vaccinated_bl) %>% 
  summarise(nGroupUnVacc = sum(n))

rq4_sex_aggreg <- rq4_sex_aggreg %>% 
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)


rq4_sex_aggreg <- rq4_sex_aggreg %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))

rq4a_sex_aggreg <- rq4_sex_aggreg %>% 
  select(sex_cd, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(sex_cd, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  mutate(cohort = 'All')

rq4b_sex_aggreg <- rq4_sex_aggreg %>% 
  select(sex_cd, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_sex_aggrega <- rq4b_sex_aggreg %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(sex_cd, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_sex_aggregb <- rq4b_sex_aggreg %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(sex_cd, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_sex_aggreg <- bind_rows(rq4a_sex_aggreg, rq4b_sex_aggrega, rq4b_sex_aggregb)

rm(rq4a_sex_aggreg, rq4b_sex_aggreg, rq4b_sex_aggrega, rq4b_sex_aggregb)





# rq4 residence_area_nuts2_cd
rq4_area_aggreg_nuts2 <- df %>%
  filter(RQ == "rq4_residence_area_nuts2_cd") %>%
  group_by(residence_area_nuts2_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>%
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_residence_area_nuts2_cd") %>%
  group_by(residence_area_nuts2_cd) %>%
  summarise(nGroup = sum(n))

rq4_area_aggreg_nuts2 <- left_join(rq4_area_aggreg_nuts2, group)

groupVacc <- df %>%
  filter(RQ == "rq4_residence_area_nuts2_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(residence_area_nuts2_cd, fully_vaccinated_bl) %>%
  summarise(nGroupVacc = sum(n))

rq4_area_aggreg_nuts2 <- left_join(rq4_area_aggreg_nuts2, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_residence_area_nuts2_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(residence_area_nuts2_cd, fully_vaccinated_bl) %>%
  summarise(nGroupUnVacc = sum(n))

rq4_area_aggreg_nuts2 <- rq4_area_aggreg_nuts2 %>%
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)



rq4_area_aggreg_nuts2 <- rq4_area_aggreg_nuts2 %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))


rq4_area_nuts2 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 2) %>% 
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)


rq4_area_nuts2 <- left_join(rq4_area_nuts2, rq4_area_aggreg_nuts2, join_by(NUTS_ID == residence_area_nuts2_cd), relationship = "many-to-many") %>% distinct()

rq4a_area_nuts2 <- rq4_area_nuts2 %>% 
  select(NUTS_ID, NUTS_NAME, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(NUTS_ID, NUTS_NAME, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  filter(hospi_due_to_covid_bl == TRUE) %>% 
  select(-hospi_due_to_covid_bl) %>%
  mutate(cohort = 'All')

rq4b_area_nuts2 <- rq4_area_nuts2 %>% 
  filter(hospi_due_to_covid_bl == TRUE) %>% 
  select(NUTS_ID, NUTS_NAME, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_area_nuts2a <- rq4b_area_nuts2 %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(NUTS_ID, NUTS_NAME, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_area_nuts2b <- rq4b_area_nuts2 %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(NUTS_ID, NUTS_NAME, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_area_nuts2 <- bind_rows(rq4a_area_nuts2, rq4b_area_nuts2a, rq4b_area_nuts2b)

rm(rq4a_area_nuts2, rq4b_area_nuts2, rq4b_area_nuts2a, rq4b_area_nuts2b)




# rq4 residence_area_cd (nuts3)
rq4_area_aggreg_nuts3 <- df %>%
  filter(RQ == "rq4_residence_area_cd") %>%
  group_by(residence_area_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>%
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_residence_area_cd") %>%
  group_by(residence_area_cd) %>%
  summarise(nGroup = sum(n))

rq4_area_aggreg_nuts3 <- left_join(rq4_area_aggreg_nuts3, group)

groupVacc <- df %>%
  filter(RQ == "rq4_residence_area_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(residence_area_cd, fully_vaccinated_bl) %>%
  summarise(nGroupVacc = sum(n))

rq4_area_aggreg_nuts3 <- left_join(rq4_area_aggreg_nuts3, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_residence_area_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(residence_area_cd, fully_vaccinated_bl) %>%
  summarise(nGroupUnVacc = sum(n))

rq4_area_aggreg_nuts3 <- rq4_area_aggreg_nuts3 %>%
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)



rq4_area_aggreg_nuts3 <- rq4_area_aggreg_nuts3 %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))


rq4_area_nuts3 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 3) %>% 
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)


rq4_area_nuts3 <- left_join(rq4_area_nuts3, rq4_area_aggreg_nuts3, join_by(NUTS_ID == residence_area_cd), relationship = "many-to-many") %>% distinct()

rq4a_area_nuts3 <- rq4_area_nuts3 %>% 
  select(NUTS_ID, NUTS_NAME, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(NUTS_ID, NUTS_NAME, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  filter(hospi_due_to_covid_bl == TRUE) %>% 
  select(-hospi_due_to_covid_bl) %>%
  mutate(cohort = 'All')

rq4b_area_nuts3 <- rq4_area_nuts3 %>% 
  filter(hospi_due_to_covid_bl == TRUE) %>% 
  select(NUTS_ID, NUTS_NAME, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_area_nuts3a <- rq4b_area_nuts3 %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(NUTS_ID, NUTS_NAME, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_area_nuts3b <- rq4b_area_nuts3 %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(NUTS_ID, NUTS_NAME, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_area_nuts3 <- bind_rows(rq4a_area_nuts3, rq4b_area_nuts3a, rq4b_area_nuts3b)

rm(rq4a_area_nuts3, rq4b_area_nuts3, rq4b_area_nuts3a, rq4b_area_nuts3b)




# rq4 residence_area_lau_cd (lau2)
rq4_area_aggreg_lau2 <- df %>%
  filter(RQ == "rq4_residence_area_lau_cd") %>%
  group_by(residence_area_lau_cd,
           hospi_due_to_covid_bl,
           fully_vaccinated_bl) %>%
  summarise(n = sum(n))

group <- df %>%
  filter(RQ == "rq4_residence_area_lau_cd") %>%
  group_by(residence_area_lau_cd) %>%
  summarise(nGroup = sum(n))

rq4_area_aggreg_lau2 <- left_join(rq4_area_aggreg_lau2, group)

groupVacc <- df %>%
  filter(RQ == "rq4_residence_area_lau_cd", fully_vaccinated_bl == TRUE) %>%
  group_by(residence_area_lau_cd, fully_vaccinated_bl) %>%
  summarise(nGroupVacc = sum(n))

rq4_area_aggreg_lau2 <- left_join(rq4_area_aggreg_lau2, groupVacc)

groupUnVacc <- df %>%
  filter(RQ == "rq4_residence_area_lau_cd", fully_vaccinated_bl == FALSE) %>%
  group_by(residence_area_lau_cd, fully_vaccinated_bl) %>%
  summarise(nGroupUnVacc = sum(n))

rq4_area_aggreg_lau2 <- rq4_area_aggreg_lau2 %>%
  left_join(groupUnVacc) %>% distinct()

rm(group, groupVacc, groupUnVacc)



rq4_area_aggreg_lau2 <- rq4_area_aggreg_lau2 %>%
  mutate(subgroup = n/nGroup,
         overall = n/individuals_nm,
         subgroupVacc = ifelse(fully_vaccinated_bl == TRUE, n/nGroupVacc, NA),
         subgroupUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/nGroupUnVacc, NA),
         overallVacc = ifelse(fully_vaccinated_bl == TRUE, n/individuals_vaccinated_nm, NA),
         overallUnVacc = ifelse(fully_vaccinated_bl == FALSE, n/individuals_not_vaccinated_nm, NA))


rq4_area_lau2 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 4) %>% 
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)


rq4_area_lau2 <- left_join(rq4_area_lau2, rq4_area_aggreg_lau2, join_by(NUTS_ID == residence_area_lau_cd), relationship = "many-to-many") %>% distinct()

rq4a_area_lau2 <- rq4_area_lau2 %>% 
  select(NUTS_ID, NUTS_NAME, hospi_due_to_covid_bl, n, overall, subgroup) %>%
  group_by(NUTS_ID, NUTS_NAME, hospi_due_to_covid_bl) %>%
  summarize(across(everything(), ~ ifelse(all(is.na(.)), NA, sum(., na.rm = TRUE))), .groups = 'drop') %>%
  filter(hospi_due_to_covid_bl == TRUE) %>% 
  select(-hospi_due_to_covid_bl) %>%
  mutate(cohort = 'All')

rq4b_area_lau2 <- rq4_area_lau2 %>% 
  filter(hospi_due_to_covid_bl == TRUE) %>% 
  select(NUTS_ID, NUTS_NAME, fully_vaccinated_bl, n, overallVacc, subgroupVacc, overallUnVacc, subgroupUnVacc)

rq4b_area_lau2a <- rq4b_area_lau2 %>%
  filter(fully_vaccinated_bl == TRUE) %>%
  select(NUTS_ID, NUTS_NAME, n, overallVacc, subgroupVacc) %>%
  rename(
    overall = overallVacc,
    subgroup = subgroupVacc) %>%
  mutate(cohort = 'Vaccinated')

rq4b_area_lau2b <- rq4b_area_lau2 %>%
  filter(fully_vaccinated_bl == FALSE) %>%
  select(NUTS_ID, NUTS_NAME, n, overallUnVacc, subgroupUnVacc) %>%
  rename(
    overall = overallUnVacc,
    subgroup = subgroupUnVacc) %>%
  mutate(cohort = 'Unvaccinated')

rq4_area_lau2 <- bind_rows(rq4a_area_lau2, rq4b_area_lau2a, rq4b_area_lau2b)

rm(rq4a_area_lau2, rq4b_area_lau2, rq4b_area_lau2a, rq4b_area_lau2b)



# by vaccination tests
map_col_tests <- list(
  list("range1", "0"),
  list("range2", "1 to 5"),
  list("range3", "more than 5")
)

# by vaccination doses
map_col_doses <- list(
  list("range1", "0"),
  list("range2", "1"),
  list("range3", "2 or more")
)


# by vaccination doses
map_col_hospi <- list(
  list("range1", "0"),
  list("range2", "1"),
  list("range3", "2 or more")
)

map_vacc_subgroup <- list(
  list("ratio", "Vaccinated"),
  list("ratio3", "Not vaccinated")
)


write_xlsx(global_metrics_df, "global_metrics.xlsx")

```

<span style="color: green; font-weight: bold; font-size: 22px;">`r country_fullname`</span><br>
Report version: **v`r script_version`**

## Introduction

The aim of this use case is **to determine the population uptake metrics for SARS-CoV-2 testing, SARS-CoV-2 vaccination, and hospitalisation due to an infection with SARS-CoV-2** in the adult population who have been tested at least once for COVID-19 and/or have been vaccinated. <br>
Testing statistics, vaccination uptake and coverage, and hospitalisation will be assessed by age, sex, geographical region, target groups, and socioeconomic indicators.

The purpose of this use case is not only to answer the research questions but **also to test the feasibility of conducting such a study without the EHDS infrastructure** in place and then with the different services that will be developed by the **HealthData@EU pilot project**. These findings will factually present the benefits and added value of the HealthData@EU infrastructure.

## Research Questions

Four research questions has been established to conduct this use case:
<br>

  **1.** What is the average number of PCR tests within the study period in the cohort by socioeconomic levels?
  <br>
  **2.** What is the average number of positive COVID-19 tests per individual in the cohort by socioeconomic levels?
  <br>
  **3.** What is the ratio between individuals who received a complete vaccination scheme against SARS-CoV-2 compared to the total number of individuals in the cohort at the end of the study period?
  <br>
  **4.** What is the ratio of individuals who have been hospitalized at least once due to COVID-19 compared to all individuals in the cohort since January 1, 2021?
  <br>
  **5.** What is the ratio of individuals who received a complete vaccination scheme against SARS-CoV-2 and have been hospitalized at least once due to COVID-19 compared to all individuals fully vaccinated in the cohort since January 1, 2021?
  <br>


Data analysis is divided into three sections, each focusing on specific research questions:<br>

 - **Testing metrics** (RQ 1 & 2)<br>
 - **Vaccination Metrics** (RQ3)<br>
 - **Hospitalisation Metrics** (RQ4-5)<br>


## Cohort Information

The study population consists of all residents of a country tested and/or vaccinated with at least one dose of any SARS-CoV-2 vaccine. People who are below 18 years old, not a resident of the participant country and people who have not had a documented confirmed SARS-CoV-2 testing after January 1, 2021 (SARS-CoV-2 vaccine roll-out), are excluded from the analysis.

  **Cohort size**: `r individuals_nm` unique individuals.<br>
  **Study period**: from `r date_from` to `r date_to`.<br>
  **Age range**: `r age_min`-`r age_max`.<br>
  **Threshold**: groups with less then `r threshold` individuals are excluded.<br>
  **Groups excluded**: `r groups_excluded` groups*.<br>

*Excluded groups are represented by the value "Excluded" under the group size (N) in data tables.

## Global Metrics

NOTE: If any bars are missing in the graphs, simply refresh the graph by selecting a different option from the dropdown menu.

::: panel-tabset

### Education level


```{r cohort information education}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 10

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Education:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Education: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# List of columns that can be chosen for the Y-axis, excluding 'Group', 'SD', and 'IQR'
y_axis_choices <- colnames(filtered_general_table)[
  !colnames(filtered_general_table) %in% c("Group") &  # Exclude 'Group'
  !grepl("SD", colnames(filtered_general_table)) &      # Exclude columns containing 'SD'
  !grepl("IQR", colnames(filtered_general_table))       # Exclude columns containing 'IQR'
]

# Default plot using the first available column for the Y-axis
plot_dynamic <- barplot_general_metrics(
  data = filtered_general_table,
  y_var = y_axis_choices[1],
  plot_title = "Dynamic Barplot for Vaccination Rate",
  x_label = "Education Level",
  y_label = y_axis_choices[1]
)


# Plotly Dropdown to select Y-axis dynamically
plot_ly(data = filtered_general_table) %>%
  add_bars(x = ~Group, y = ~`Vaccination Rate (%)`, name = "Group") %>%
  layout(
    title = "Analysis by Education Level",
    xaxis = list(title = "Education Level"),
    yaxis = list(title = "Values"),
    updatemenus = list(
      list(
        y = 1,
        buttons = lapply(y_axis_choices, function(col) {
          list(
            method = "restyle",
            args = list(list(y = list(filtered_general_table[[col]]))),
            label = col
          )
        })
      )
    )
  )

```

<br>

```{r cohort information education table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Education:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Education: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# Display the filtered dataframe in a datatable
datatable(filtered_general_table, options = list(autoWidth = TRUE))


```

### Income level

```{r cohort information income}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 10

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Income:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Income: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# List of columns that can be chosen for the Y-axis, excluding 'Group', 'SD', and 'IQR'
y_axis_choices <- colnames(filtered_general_table)[
  !colnames(filtered_general_table) %in% c("Group") &  # Exclude 'Group'
  !grepl("SD", colnames(filtered_general_table)) &      # Exclude columns containing 'SD'
  !grepl("IQR", colnames(filtered_general_table))       # Exclude columns containing 'IQR'
]

# Default plot using the first available column for the Y-axis
plot_dynamic <- barplot_general_metrics(
  data = filtered_general_table,
  y_var = y_axis_choices[1],
  plot_title = "Dynamic Barplot for Vaccination Rate",
  x_label = "Income Level",
  y_label = y_axis_choices[1]
)


# Plotly Dropdown to select Y-axis dynamically
plot_ly(data = filtered_general_table) %>%
  add_bars(x = ~Group, y = ~`Vaccination Rate (%)`, name = "Group") %>%
  layout(
    title = "Analysis by Income Level",
    xaxis = list(title = "Income Level"),
    yaxis = list(title = "Values"),
    updatemenus = list(
      list(
        y = 1,
        buttons = lapply(y_axis_choices, function(col) {
          list(
            method = "restyle",
            args = list(list(y = list(filtered_general_table[[col]]))),
            label = col
          )
        })
      )
    )
  )

```

<br>

```{r cohort information income table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Income:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Income: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# Display the filtered dataframe in a datatable
datatable(filtered_general_table, options = list(autoWidth = TRUE))

```

### Migration background

```{r cohort information migration}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 10

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Migration:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Migration: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# List of columns that can be chosen for the Y-axis, excluding 'Group', 'SD', and 'IQR'
y_axis_choices <- colnames(filtered_general_table)[
  !colnames(filtered_general_table) %in% c("Group") &  # Exclude 'Group'
  !grepl("SD", colnames(filtered_general_table)) &      # Exclude columns containing 'SD'
  !grepl("IQR", colnames(filtered_general_table))       # Exclude columns containing 'IQR'
]

# Default plot using the first available column for the Y-axis
plot_dynamic <- barplot_general_metrics(
  data = filtered_general_table,
  y_var = y_axis_choices[1],
  plot_title = "Dynamic Barplot for Vaccination Rate",
  x_label = "Migration background",
  y_label = y_axis_choices[1]
)


# Plotly Dropdown to select Y-axis dynamically
plot_ly(data = filtered_general_table) %>%
  add_bars(x = ~Group, y = ~`Vaccination Rate (%)`, name = "Group") %>%
  layout(
    title = "Analysis by Migration background",
    xaxis = list(title = "Migration background"),
    yaxis = list(title = "Values"),
    updatemenus = list(
      list(
        y = 1,
        buttons = lapply(y_axis_choices, function(col) {
          list(
            method = "restyle",
            args = list(list(y = list(filtered_general_table[[col]]))),
            label = col
          )
        })
      )
    )
  )

```

<br>

```{r cohort information migration table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Migration:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Migration: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# Display the filtered dataframe in a datatable
datatable(filtered_general_table, options = list(autoWidth = TRUE))

```

### Household type


```{r cohort information household}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 10

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Household:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Household: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# List of columns that can be chosen for the Y-axis, excluding 'Group', 'SD', and 'IQR'
y_axis_choices <- colnames(filtered_general_table)[
  !colnames(filtered_general_table) %in% c("Group") &  # Exclude 'Group'
  !grepl("SD", colnames(filtered_general_table)) &      # Exclude columns containing 'SD'
  !grepl("IQR", colnames(filtered_general_table))       # Exclude columns containing 'IQR'
]

# Default plot using the first available column for the Y-axis
plot_dynamic <- barplot_general_metrics(
  data = filtered_general_table,
  y_var = y_axis_choices[1],
  plot_title = "Dynamic Barplot for Vaccination Rate",
  x_label = "Household type",
  y_label = y_axis_choices[1]
)


# Plotly Dropdown to select Y-axis dynamically
plot_ly(data = filtered_general_table) %>%
  add_bars(x = ~Group, y = ~`Vaccination Rate (%)`, name = "Group") %>%
  layout(
    title = "Analysis by Household type",
    xaxis = list(title = "Household type"),
    yaxis = list(title = "Values"),
    updatemenus = list(
      list(
        y = 1,
        buttons = lapply(y_axis_choices, function(col) {
          list(
            method = "restyle",
            args = list(list(y = list(filtered_general_table[[col]]))),
            label = col
          )
        })
      )
    )
  )

```

<br>

```{r cohort information household table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Household:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Household: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# Display the filtered dataframe in a datatable
datatable(filtered_general_table, options = list(autoWidth = TRUE))

```


### Sex

```{r cohort information sex}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 10

filtered_general_table <- global_metrics_df %>%
  filter(Group %in% c("Entire Cohort", "Male", "Female")) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column


# List of columns that can be chosen for the Y-axis, excluding 'Group', 'SD', and 'IQR'
y_axis_choices <- colnames(filtered_general_table)[
  !colnames(filtered_general_table) %in% c("Group") &  # Exclude 'Group'
  !grepl("SD", colnames(filtered_general_table)) &      # Exclude columns containing 'SD'
  !grepl("IQR", colnames(filtered_general_table))       # Exclude columns containing 'IQR'
]

# Default plot using the first available column for the Y-axis
plot_dynamic <- barplot_general_metrics(
  data = filtered_general_table,
  y_var = y_axis_choices[1],
  plot_title = "Dynamic Barplot for Vaccination Rate",
  x_label = "Sex",
  y_label = y_axis_choices[1]
)


# Plotly Dropdown to select Y-axis dynamically
plot_ly(data = filtered_general_table) %>%
  add_bars(x = ~Group, y = ~`Vaccination Rate (%)`, name = "Group") %>%
  layout(
    title = "Analysis by Sex",
    xaxis = list(title = "Sex"),
    yaxis = list(title = "Values"),
    updatemenus = list(
      list(
        y = 1,
        buttons = lapply(y_axis_choices, function(col) {
          list(
            method = "restyle",
            args = list(list(y = list(filtered_general_table[[col]]))),
            label = col
          )
        })
      )
    )
  )

```

<br>

```{r cohort information sex table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

filtered_general_table <- global_metrics_df %>%
  filter(Group %in% c("Entire Cohort", "Male", "Female")) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# Display the filtered dataframe in a datatable
datatable(filtered_general_table, options = list(autoWidth = TRUE))

```

### Residence Area

```{r cohort information residence}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 10

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Residence:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Residence: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# List of columns that can be chosen for the Y-axis, excluding 'Group', 'SD', and 'IQR'
y_axis_choices <- colnames(filtered_general_table)[
  !colnames(filtered_general_table) %in% c("Group") &  # Exclude 'Group'
  !grepl("SD", colnames(filtered_general_table)) &      # Exclude columns containing 'SD'
  !grepl("IQR", colnames(filtered_general_table))       # Exclude columns containing 'IQR'
]

# Default plot using the first available column for the Y-axis
plot_dynamic <- barplot_general_metrics(
  data = filtered_general_table,
  y_var = y_axis_choices[1],
  plot_title = "Dynamic Barplot for Vaccination Rate",
  x_label = "Residence area",
  y_label = y_axis_choices[1]
)


# Plotly Dropdown to select Y-axis dynamically
plot_ly(data = filtered_general_table) %>%
  add_bars(x = ~Group, y = ~`Vaccination Rate (%)`, name = "Group") %>%
  layout(
    title = "Analysis by Residence area",
    xaxis = list(title = "Residence area"),
    yaxis = list(title = "Values"),
    updatemenus = list(
      list(
        y = 1,
        buttons = lapply(y_axis_choices, function(col) {
          list(
            method = "restyle",
            args = list(list(y = list(filtered_general_table[[col]]))),
            label = col
          )
        })
      )
    )
  )

```

<br>

```{r cohort information residence table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

filtered_general_table <- global_metrics_df %>%
  filter(Group == "Entire Cohort" | grepl("^Residence:", Group)) %>%
  mutate(
    order = ifelse(Group == "Entire Cohort", 1, 2),  # Assign 1 to 'Entire Cohort' and 2 to others
    Group = gsub("^Residence: ", "", Group)  # Remove 'Education level:' from the Group column
  ) %>%
  arrange(order) %>%  # Arrange by the 'order' column
  select(-order)  # Remove the 'order' column

# Display the filtered dataframe in a datatable
datatable(filtered_general_table, options = list(autoWidth = TRUE))


```


::: 


## Testing metrics

## Overview

::: panel-tabset

### Tests distribution

```{r RQ12 distribution}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


plot_ly() %>%
  add_bars(data = rq1_2_distribution %>% filter(tests == 'All'), 
           x = ~test_number, 
           y = ~percentage, 
           name = "Total Tests", 
           marker = list(color = 'rgba(0,0,255,0.6)')) %>%
  add_bars(data = rq1_2_distribution %>% filter(tests == 'Positives'), 
           x = ~test_number, 
           y = ~percentage, 
           name = "Positive Tests", 
           marker = list(color = 'rgba(0,255,0,0.6)')) %>%
  layout(title = "COVID-19 PCR tests distribution accross the cohort population",
         xaxis = list(title = "COVID-19 PCR Tests"),
         yaxis = list(title = "Percentage", tickformat = ",.0%", hoverformat = ".2%"),
         barmode = 'group')

```

### socioeconomic profils

Table regrouping average (positive) COVID-19 PCR tests performed in function of socioeconomic indicators.

```{r RQ1-2 Socioeconomic table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq1_2_summary <- rq1_2_summary %>% mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(education_level_cd = "Education",
                   income_category_cd = "Income",
                   household_type_cd = "Household",
                   migration_background_cd = "Migration",
                   type = "Tests",
                   n = "N", 
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_summary_table <- setNames(rq1_2_summary[, names(new_col_names)], new_col_names)

datatable(rq1_2_summary_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%  # Round "mean" and "sd" column values
  formatStyle(columns = c("Mean"), fontWeight = 'bold') %>% # Make "mean" column values bold
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))


```

:::

## Education level

::: panel-tabset

### Average tests

```{r rq12 education boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- boxplot_custom_group(data = rq1_2_education_aggreg, 
                            x_var = "education_level_cd",
                            x_label = "Education Level",
                            y_label = "PCR Tests",
                            plot_title = "Average number of COVID-19 PCR tests",
                            x_axis_order = plotOrderEducation)

p1_plotly


```

<br>

```{r RQ12 education table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_education_aggreg <- rq1_2_education_aggreg %>% mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(education_level_cd = "Education Level",
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_education_table <- setNames(rq1_2_education_aggreg[, names(new_col_names)], new_col_names)

datatable(rq1_2_education_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```

### Tests distribution

```{r rq12 education boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_education_tests %>% filter(type == 'All'),
                              x_var = 'education_level_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Education level",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Tests Distribution by Education Level",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderEducation)
fig


```

<br>

```{r rq12 education boxplot2 positive}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_education_tests %>% filter(type == 'Positives'),
                              x_var = 'education_level_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Education level",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Positive Tests Distribution by Education Level",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderEducation)
fig


```

<br>

```{r rq12 education table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_education_tests <- rq1_2_education_tests %>% mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(education_level_cd = "Education Level",
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_education_tests_table <- setNames(rq1_2_education_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_education_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


:::

## Income level

::: panel-tabset

### Average tests

```{r rq1 income boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- boxplot_custom_group(data = rq1_2_income_aggreg, 
                                  x_var = "income_category_cd",
                                  x_label = "Income Category",
                                  y_label = "PCR Tests",
                                  plot_title = "Average number of COVID-19 PCR tests",
                                  x_axis_order = plotOrderIncome)

p1_plotly

```

<br>

```{r RQ1 income table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_income_aggreg <- rq1_2_income_aggreg %>% mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(income_category_cd = "Income Category", 
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_income_table <- setNames(rq1_2_income_aggreg[, names(new_col_names)], new_col_names)

datatable(rq1_2_income_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


### Tests distribution

```{r rq1 income boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_income_tests %>% filter(type == 'All'),
                              x_var = 'income_category_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Income category",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Tests Distribution by Income category",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderIncome)
fig



```

<br>

```{r rq1 income boxplot2 positive}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_income_tests %>% filter(type == 'Positives'),
                              x_var = 'income_category_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Income category",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Positive Tests Distribution by Income category",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderIncome)
fig

```

<br>

```{r rq12 income table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_income_tests <- rq1_2_income_tests %>% mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(income_category_cd = "Income Category", 
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_income_tests_table <- setNames(rq1_2_income_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_income_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


:::

## Migration backgound

::: panel-tabset

### Average tests

```{r rq1 migration boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- boxplot_custom_group(data = rq1_2_migration_aggreg, 
                                  x_var = "migration_background_cd",
                                  x_label = "Migration Background",
                                  y_label = "PCR Tests",
                                  plot_title = "Average number of COVID-19 PCR tests",
                                  x_axis_order = plotOrderMigration)

p1_plotly

```

<br>

```{r RQ1 migration table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_migration_aggreg <- rq1_2_migration_aggreg %>% mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(migration_background_cd = "Migration Background", 
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_migration_table <- setNames(rq1_2_migration_aggreg[, names(new_col_names)], new_col_names)

datatable(rq1_2_migration_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


### Tests distribution

```{r rq1 migration boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_migration_tests %>% filter(type == 'All'),
                              x_var = 'migration_background_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Migration background",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Tests Distribution by Migration background",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderMigration)
fig


```

<br>

```{r rq1 migration boxplot2 positives}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_migration_tests %>% filter(type == 'Positives'),
                              x_var = 'migration_background_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Migration background",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Positive Tests Distribution by Migration background",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderMigration)
fig


```

<br>

```{r rq12 migration table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_migration_tests <- rq1_2_migration_tests %>% mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(migration_background_cd = "Migration Background", 
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_migration_tests_table <- setNames(rq1_2_migration_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_migration_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```

:::

## Household type

::: panel-tabset

### Average tests

```{r rq1 household boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- boxplot_custom_group(data = rq1_2_household_aggreg, 
                                  x_var = "household_type_cd",
                                  x_label = "Household type",
                                  y_label = "PCR Tests",
                                  plot_title = "Average number of COVID-19 PCR tests",
                                  x_axis_order = plotOrderHousehold)

p1_plotly

```

<br>

```{r RQ1 household table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_household_aggreg <- rq1_2_household_aggreg %>% mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(household_type_cd = "Household type", 
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_household_table <- setNames(rq1_2_household_aggreg[, names(new_col_names)], new_col_names)

datatable(rq1_2_household_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))


```


### Tests distribution

```{r rq1 household boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_household_tests %>% filter(type == 'All'),
                              x_var = "household_type_cd",
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Household type",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Tests Distribution by Household type",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderHousehold)
fig


```

<br>

```{r rq1 household boxplot2 positives}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_household_tests %>% filter(type == 'Positives'),
                              x_var = "household_type_cd",
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Household type",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Positive Tests Distribution by Household type",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderHousehold)
fig


```

<br>

```{r rq12 household table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_household_tests <- rq1_2_household_tests %>% mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(household_type_cd = "Household type", 
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_household_tests_table <- setNames(rq1_2_household_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_household_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


:::

## Age group

::: panel-tabset

### Average tests

```{r rq1 agegroup boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- boxplot_custom_group(data = rq1_2_age_group, 
                                  x_var = "age_cd",
                                  x_label = "Age groups",
                                  y_label = "PCR Tests",
                                  plot_title = "Average number of COVID-19 PCR tests",
                                  x_axis_order = plotOrderAge)

p1_plotly

```

<br>

```{r RQ1 agegroup table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_age_group <- rq1_2_age_group %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(age_cd = "Age groups", 
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_age_table <- setNames(rq1_2_age_group[, names(new_col_names)], new_col_names)

datatable(rq1_2_age_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```

### Tests distribution

```{r rq1 agegroup boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_age_tests %>% filter(type == 'All'),
                              x_var = 'age_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Age groups",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Tests Distribution by Age Group",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderAge)
fig


```

<br>

```{r rq1 agegroup boxplot2 positives}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_age_tests %>% filter(type == 'Positives'),
                              x_var = 'age_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Age groups",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Positive Tests Distribution by Age Group",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderAge)
fig

```

<br>

```{r rq12 agegroup table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_age_tests <- rq1_2_age_tests %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(age_cd = "Age groups", 
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_age_tests_table <- setNames(rq1_2_age_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_age_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


:::

## Sex

::: panel-tabset

### Average tests

```{r rq1 sex boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- boxplot_custom_group(data = rq1_2_sex, 
                                  x_var = "sex_cd",
                                  x_label = "Sex",
                                  y_label = "PCR Tests",
                                  plot_title = "Average number of COVID-19 PCR tests",
                                  x_axis_order = plotOrderAge)

p1_plotly

```

<br>

```{r RQ1 sex table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_sex <- rq1_2_sex %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(sex_cd = "Sex", 
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_sex_table <- setNames(rq1_2_sex[, names(new_col_names)], new_col_names)

datatable(rq1_2_sex_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```

### Tests distribution

```{r rq1 sex boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_sex_tests %>% filter(type == 'All'),
                              x_var = 'sex_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Sex",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Tests Distribution by Sex",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderSex)
fig

```

<br>

```{r rq1 sex boxplot2 positive}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8
  
fig <- barplot_stacked_custom_q4(data = rq1_2_sex_tests %>% filter(type == 'Positives'),
                              x_var = 'sex_cd',
                              y_var = "value",
                              group_var = "tests",  # Grouping variable
                              x_label = "Sex",
                              y_label = "Percentage",
                              plot_title = "COVID-19 Positive Tests Distribution by Sex",
                              legend_title = 'Number of tests',
                              x_axis_order = plotOrderSex)
fig

```

<br>

```{r rq12 sex table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_sex_tests <- rq1_2_sex_tests %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(sex_cd = "Sex", 
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_sex_tests_table <- setNames(rq1_2_sex_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_sex_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


:::

## Residence Area

::: panel-tabset

### NUTS2 Level Area

::: panel-tabset

#### Average tests

Average number of COVID-19 PCR tests (all & Positive tests).

```{r RQ12 area nuts2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

nuts2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 2) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(type = c("All", "Positives"))

rq1_2_area_nuts2_with_geometry <- left_join(nuts2, rq1_2_area, join_by(NUTS_ID == residence_area_nuts2_cd, type == type)) %>% distinct()

subdata <- c("All", "Positives")

rq1_2_area_nuts2_with_geometry <- st_as_sf(rq1_2_area_nuts2_with_geometry)


map <- choropleth_map(rq1_2_area_nuts2_with_geometry, 
                           "viridis", 
                           "type",
                           subdata, 
                           "mean", 
                           "PCR Test Results", 
                           "Distribution",
                           is_percentage = FALSE)
map


```

<br>

```{r RQ12 area nuts2 table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5


nuts2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 2) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  st_drop_geometry %>%
  crossing(type = c("All", "Positives"))


rq1_2_area_nuts2 <- left_join(nuts2, rq1_2_area, join_by(NUTS_ID == residence_area_nuts2_cd, type == type)) %>% distinct()

rq1_2_area_nuts2 <- rq1_2_area_nuts2 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(NUTS_ID = "NUTS2",
                   NUTS_NAME = "Area",
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_area_nuts2_table <- setNames(rq1_2_area_nuts2[, names(new_col_names)], new_col_names)

datatable(rq1_2_area_nuts2_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


#### Tests distribution

Distribution of all COVID-19 PCR tests (Positive & negative).

```{r rq1 area tests nuts2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq1_2_area_nuts2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 2) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(tests = c("0", "1 to 5", "more than 5"))


rq1_2_area_nuts2_tests_with_geometry <- left_join(rq1_2_area_nuts2, rq1_2_area_nuts2_tests, join_by(NUTS_ID == residence_area_nuts2_cd, tests == tests)) %>% distinct()

rq1_2_area_nuts2_tests_with_geometry <- rq1_2_area_nuts2_tests_with_geometry %>% 
  filter(type == 'All') %>%
  mutate(value = value*100)


subdata <- c("0", "1 to 5", "more than 5")

rq1_2_area_nuts2_tests_with_geometry <- st_as_sf(rq1_2_area_nuts2_tests_with_geometry)


map <- choropleth_map(rq1_2_area_nuts2_tests_with_geometry, 
                            "viridis", 
                            "tests",
                            subdata, 
                            "value", 
                            "PCR Test Results", 
                            "Distribution (%)")
map


```

<br>
Distribution of positive COVID-19 PCR tests.

```{r rq1 area tests nuts2 positive}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq1_2_area_nuts2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 2) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(tests = c("0", "1 to 5", "more than 5"))


rq1_2_area_nuts2_tests_with_geometry <- left_join(rq1_2_area_nuts2, rq1_2_area_nuts2_tests, join_by(NUTS_ID == residence_area_nuts2_cd, tests == tests)) %>% distinct()

rq1_2_area_nuts2_tests_with_geometry <- rq1_2_area_nuts2_tests_with_geometry %>% 
  filter(type == 'Positives') %>%
  mutate(value = value*100)

subdata <- c("0", "1 to 5", "more than 5")

rq1_2_area_nuts2_tests_with_geometry <- st_as_sf(rq1_2_area_nuts2_tests_with_geometry)


map <- choropleth_map(rq1_2_area_nuts2_tests_with_geometry, 
                            "viridis", 
                            "tests",
                            subdata, 
                            "value", 
                            "PCR Test Results", 
                            "Distribution (%)")
map


```

<br>

```{r rq12 area nuts2 table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_area_nuts2 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 2) %>% 
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)

rq1_2_area_nuts2_tests <- left_join(rq1_2_area_nuts2, rq1_2_area_nuts2_tests, join_by(NUTS_ID == residence_area_nuts2_cd))

rq1_2_area_nuts2_tests <- rq1_2_area_nuts2_tests %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "NUTS2",
                   NUTS_NAME = "Area",
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_area_nuts2_tests_table <- setNames(rq1_2_area_nuts2_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_area_nuts2_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


:::

### NUTS3 Level Area

::: panel-tabset

#### Average tests

Average number of COVID-19 PCR tests (all & Positive tests).

```{r RQ12 area nuts3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


nuts3 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 3) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(type = c("All", "Positives"))

rq1_2_area_nuts3_with_geometry <- left_join(nuts3, rq1_2_area, join_by(NUTS_ID == residence_area_cd, type == type)) %>% distinct()

subdata <- c("All", "Positives")

rq1_2_area_nuts3_with_geometry <- st_as_sf(rq1_2_area_nuts3_with_geometry)


map <- choropleth_map(rq1_2_area_nuts3_with_geometry, 
                           "viridis", 
                           "type",
                           subdata, 
                           "mean", 
                           "PCR Test Results", 
                           "Distribution",
                           is_percentage = FALSE)
map


```

<br>

```{r RQ12 area nuts3 table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5



nuts3 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 3) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  st_drop_geometry %>%
  crossing(type = c("All", "Positives"))

rq1_2_area_nuts3 <- left_join(nuts3, rq1_2_area, join_by(NUTS_ID == residence_area_cd, type == type)) %>% distinct()

rq1_2_area_nuts3 <- rq1_2_area_nuts3 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(NUTS_ID = "NUTS3",
                   NUTS_NAME = "Area",
                   n = "N", 
                   type = "Tests",
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_area_nuts3_table <- setNames(rq1_2_area_nuts3[, names(new_col_names)], new_col_names)

datatable(rq1_2_area_nuts3_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```


#### Tests distribution

Distribution of all COVID-19 PCR tests (Positive & negative).

```{r rq1 area tests nuts3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq1_2_area_nuts3 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 3) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(tests = c("0", "1 to 5", "more than 5"))


rq1_2_area_nuts3_tests_with_geometry <- left_join(rq1_2_area_nuts3, rq1_2_area_nuts3_tests, join_by(NUTS_ID == residence_area_cd, tests == tests)) %>% distinct()

rq1_2_area_nuts3_tests_with_geometry <- rq1_2_area_nuts3_tests_with_geometry %>% 
  filter(type == 'All') %>%
  mutate(value = value*100)

subdata <- c("0", "1 to 5", "more than 5")

rq1_2_area_nuts3_tests_with_geometry <- st_as_sf(rq1_2_area_nuts3_tests_with_geometry)


map <- choropleth_map(rq1_2_area_nuts3_tests_with_geometry, 
                            "viridis", 
                            "tests",
                            subdata, 
                            "value", 
                            "PCR Test Results", 
                            "Distribution (%)")
map

```

<br>
Distribution of positive COVID-19 PCR tests.

```{r rq1 area tests nuts3 positives}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq1_2_area_nuts3 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 3) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(tests = c("0", "1 to 5", "more than 5"))


rq1_2_area_nuts3_tests_with_geometry <- left_join(rq1_2_area_nuts3, rq1_2_area_nuts3_tests, join_by(NUTS_ID == residence_area_cd, tests == tests)) %>% distinct()

rq1_2_area_nuts3_tests_with_geometry <- rq1_2_area_nuts3_tests_with_geometry %>% 
  filter(type == 'Positives') %>%
  mutate(value = value*100)

subdata <- c("0", "1 to 5", "more than 5")

rq1_2_area_nuts3_tests_with_geometry <- st_as_sf(rq1_2_area_nuts3_tests_with_geometry)


map <- choropleth_map(rq1_2_area_nuts3_tests_with_geometry, 
                            "viridis", 
                            "tests",
                            subdata, 
                            "value", 
                            "PCR Test Results", 
                            "Distribution (%)")
map


```

<br>

```{r rq12 area nuts3 table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_area_nuts3 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 3) %>% 
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)

rq1_2_area_nuts3_tests <- left_join(rq1_2_area_nuts3, rq1_2_area_nuts3_tests, join_by(NUTS_ID == residence_area_cd))

rq1_2_area_nuts3_tests <- rq1_2_area_nuts3_tests %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "NUTS3",
                   NUTS_NAME = "Area",
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_area_nuts3_tests_table <- setNames(rq1_2_area_nuts3_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_area_nuts3_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```

:::

### LAU2 Level Area

::: panel-tabset

#### Average tests

Average number of COVID-19 PCR tests (all & Positive tests).

```{r RQ1 area lau2 table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


rq1_2_area_lau <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 4) %>% 
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)


rq1_2_area_lau <- left_join(rq1_2_area_lau, rq1_2_area, join_by(NUTS_ID == residence_area_lau_cd))

rq1_2_area_lau <- rq1_2_area_lau %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "LAU2",
                   NUTS_NAME = "Area", 
                   type = "Tests",
                   n = "N", 
                   mean = "Mean", 
                   sd = "SD",
                   median = "Median")

rq1_2_area_table <- setNames(rq1_2_area_lau[, names(new_col_names)], new_col_names)

datatable(rq1_2_area_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatRound(columns = c("Mean", "SD", "Median"), digits = 2) %>%
  formatStyle(columns = "Mean", fontWeight = 'bold') %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```

#### Tests distribution



```{r rq12 area lau2 table tests}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq1_2_area_lau <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 4) %>% 
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)

rq1_2_area_lau2_tests <- left_join(rq1_2_area_lau, rq1_2_area_lau2_tests, join_by(NUTS_ID == residence_area_lau_cd))

rq1_2_area_lau2_tests <- rq1_2_area_lau2_tests %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "LAU2",
                   NUTS_NAME = "Area",
                   type = "Tests",
                   n = "N", # Total individuals per group
                   tests = "# Tests",
                   value = "Distribution")

rq1_2_area_lau2_tests_table <- setNames(rq1_2_area_lau2_tests[, names(new_col_names)], new_col_names)

datatable(rq1_2_area_lau2_tests_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("# Tests", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "# Tests", backgroundColor = styleEqual(c("0", "1 to 5", "more than 5"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0"))) %>%
  formatStyle(columns = "Tests", backgroundColor = styleEqual(c("All", "Positives"), c("#FFF0F0", "#F0F0FF")))

```

:::

:::

## Vaccination Metrics

## Overview

::: panel-tabset

### Vaccination rate

```{r RQ3 general}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

plot_ly() %>%
  add_bars(data = rq3_general , x = ~fully_vaccinated_bl, y = ~ratio, name = "Vaccination status", marker = list(color = 'rgba(0,0,255,0.6)')) %>%
  layout(title = "COVID-19 vaccination rate in the whole cohort",
         xaxis = list(title = "Vaccination status", tickmode = "linear", dtick = 1),
         yaxis = list(title = "Percentage", tickformat = ",.0%", hoverformat = ".2%"),
         barmode = 'overlay')
```

### Doses distribution

Distribution of COVID-19 vaccine doses within the cohort.

```{r RQ3 distribution}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


plot_ly() %>%
  add_bars(data = rq3_distribution , x = ~dose_number, y = ~ratio, name = "Total Doses", marker = list(color = 'rgba(0,0,255,0.6)')) %>%
  layout(title = "Distribution of COVID-19 vaccine doses received per individual",
         xaxis = list(title = "Number of Vaccine doses", tickmode = "linear", dtick = 1),
         yaxis = list(title = "Percentage", tickformat = ",.0%", hoverformat = ".2%"),
         barmode = 'overlay')

```

### Socioeconomic profils

Vaccination rate within different socioeconomic profils.
**Subgroup**: percentage of individuals that received a complete vaccination schema in this subgroup. 
**Overall**: percentage of individuals that received a complete vaccination schema compare to the whole cohort.

```{r rq3 Socioeconomic table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq3_summary <- rq3_summary %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(education_level_cd = "Education",
                   income_category_cd = "Income",
                   household_type_cd = "Household",
                   migration_background_cd = "Migration",
                   n = "N",
                   ratio = "Subgroup",
                   ratio2 = "Overall")

rq3_summary_table <- setNames(rq3_summary[, names(new_col_names)], new_col_names)

datatable(rq3_summary_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold')


```

:::


## Education level

::: panel-tabset

### Overall status

```{r rq3 education barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_custom(data = rq3_education_aggreg %>% filter(fully_vaccinated_bl == TRUE),
                      x_var = 'education_level_cd',
                      y_var = 'overall',
                      x_label = "Education level",
                      y_label = "Percentage",
                      plot_title = "COVID-19 vaccination rate by Education Level",
                      legend_title = 'Status',
                      x_axis_order = plotOrderEducation)
fig


```

### Subgroup status

```{r rq3 education boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq3_education_aggreg,
                                       x_var = "education_level_cd",
                                       y_var = "subgroup",
                                       group_var = "fully_vaccinated_bl",
                                       x_label = "Education level",
                                       y_label = "Percentage",
                                       plot_title = "COVID-19 vaccination rate by Education Level",
                                       legend_title = "Vaccinated",
                                       x_axis_order = plotOrderEducation)

p1_plotly


```

### Statistics

```{r rq3 education table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_education_aggreg <- rq3_education_aggreg %>% filter(fully_vaccinated_bl == TRUE)

rq3_education_aggreg <- rq3_education_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(education_level_cd = "Education Level",
                   n = "N", # Total individuals per group
                   subgroup = "Subgroup",
                   overall = "Overall")

rq3_education_table <- setNames(rq3_education_aggreg[, names(new_col_names)], new_col_names)

datatable(rq3_education_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold') 



```

### Doses distribution

```{r rq3 education boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq3_education_doses,
                                    x_var = 'education_level_cd',
                                    y_var = "value",
                                    group_var = "doses",  # Grouping variable
                                    x_label = "Education level",
                                    y_label = "Percentage",
                                    plot_title = "Distribution of COVID-19 vaccine doses by Education Level",
                                    legend_title = 'Number of doses',
                                    x_axis_order = plotOrderEducation)

p1_plotly



```

<br>

```{r rq3 education table doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_education_doses <- rq3_education_doses %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(education_level_cd = "Education Level",
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_education_doses_table <- setNames(rq3_education_doses[, names(new_col_names)], new_col_names)

datatable(rq3_education_doses_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```

:::

## Income level

::: panel-tabset

### Overall status

```{r rq3 income barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_custom(data = rq3_income_aggreg %>% filter(fully_vaccinated_bl == TRUE),
                              x_var = 'income_category_cd',
                              y_var = 'overall',
                              x_label = "Income Category",
                              y_label = "Percentage",
                              plot_title = "COVID-19 vaccination rate by Income Category",
                              legend_title = 'Status',
                              x_axis_order = plotOrderIncome)
fig


```

### Subgroup status

```{r rq3 income boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq3_income_aggreg,
                                       x_var = "income_category_cd",
                                       y_var = "subgroup",
                                       group_var = "fully_vaccinated_bl",
                                        x_label = "Income Category",
                                       y_label = "Percentage",
                              plot_title = "COVID-19 vaccination rate by Income Category",
                              legend_title = 'Status',
                                       x_axis_order = plotOrderIncome)

p1_plotly


```

### Statistics

```{r rq3 income table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_income_aggreg <- rq3_income_aggreg %>% filter(fully_vaccinated_bl == TRUE)

rq3_income_aggreg <- rq3_income_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(income_category_cd = "Income Category", 
                   n = "N", # Total individuals per group
                   overall = "Subgroup",
                   subgroup = "Overall")

rq3_income_table <- setNames(rq3_income_aggreg[, names(new_col_names)], new_col_names)

datatable(rq3_income_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold') 

```

### Doses distribution

```{r rq3 income boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


fig <- barplot_stacked_custom_q4(data = rq3_income_doses,
                                    x_var = 'income_category_cd',
                                    y_var = "value",
                                    group_var = "doses",  # Grouping variable
                                    x_label = "Income category",
                                    y_label = "Percentage",
                                    plot_title = "Distribution of COVID-19 vaccine doses by Income category",
                                    legend_title = 'Number of doses',
                                    x_axis_order = plotOrderIncome)
fig


```

<br>

```{r rq3 income table doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_income_doses <- rq3_income_doses %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(income_category_cd = "Income Category", 
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_income_doses_table <- setNames(rq3_income_doses[, names(new_col_names)], new_col_names)

datatable(rq3_income_doses_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```


:::

## Migration backgound

::: panel-tabset

### Overall status

```{r rq3 migration barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_custom(data = rq3_migration_aggreg %>% filter(fully_vaccinated_bl == TRUE),
                              x_var = 'migration_background_cd',
                              y_var = 'overall',
                              x_label = "Migration Background",
                              y_label = "Percentage",
                              plot_title = "COVID-19 vaccination rate by Migration Background",
                              legend_title = 'Status',
                              x_axis_order = plotOrderMigration)
fig


```

### Subgroup status

```{r rq3 migration boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq3_migration_aggreg,
                                       x_var = 'migration_background_cd',
                                       y_var = "subgroup",
                                       group_var = "fully_vaccinated_bl",
                                       x_label = "Migration Background",
                                       y_label = "Percentage",
                                       plot_title = "COVID-19 vaccination rate by Migration Background",
                                       legend_title = 'Status',
                                       x_axis_order = plotOrderMigration)

p1_plotly


```

### Statistics

```{r rq3 migration table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_migration_aggreg <- rq3_migration_aggreg %>% filter(fully_vaccinated_bl == TRUE)

rq3_migration_aggreg <- rq3_migration_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(migration_background_cd = "Migration Background", 
                   n = "N", # Total individuals per group
                   overall = "Subgroup",
                   subgroup = "Overall")

rq3_migration_table <- setNames(rq3_migration_aggreg[, names(new_col_names)], new_col_names)

datatable(rq3_migration_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold') 

```

### Doses distribution

```{r rq3 migration boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_stacked_custom_q4(data = rq3_migration_doses,
                              x_var = 'migration_background_cd',
                                    y_var = "value",
                                    group_var = "doses",  # Grouping variable
                              x_label = "Migration background",
                              y_label = "Percentage",
                              plot_title = "Distribution of COVID-19 vaccine doses by Migration background",
                              legend_title = 'Number of doses',
                              x_axis_order = plotOrderMigration)
fig


```

<br>

```{r rq3 migration table doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_migration_doses <- rq3_migration_doses %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(migration_background_cd = "Migration Background", 
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_migration_doses_table <- setNames(rq3_migration_doses[, names(new_col_names)], new_col_names)

datatable(rq3_migration_doses_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```


:::

## Household type

::: panel-tabset

### Overall status

```{r rq3 household barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_custom(data = rq3_household_aggreg %>% filter(fully_vaccinated_bl == TRUE),
                              x_var = 'household_type_cd',
                              y_var = 'overall',
                              x_label = "Household type",
                              y_label = "Percentage",
                              plot_title = "COVID-19 vaccination rate by Household type",
                              legend_title = 'Status',
                              x_axis_order = plotOrderHousehold)
fig


```

### Subgroup status

```{r rq3 household boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq3_household_aggreg,
                                       x_var = "household_type_cd",
                                       y_var = "subgroup",
                                       group_var = "fully_vaccinated_bl",
                                       x_label = "Household type",
                                       y_label = "Percentage",
                                       plot_title = "COVID-19 vaccination rate by Household type",
                                       legend_title = "Status",
                                       x_axis_order = plotOrderHousehold)

p1_plotly



```

### Statistics

```{r rq3 household table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_household_aggreg <- rq3_household_aggreg %>% filter(fully_vaccinated_bl == TRUE)

rq3_household_aggreg <- rq3_household_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(household_type_cd = "Household type", 
                   n = "N", # Total individuals per group
                   overall = "Subgroup",
                   subgroup = "Overall")

rq3_household_table <- setNames(rq3_household_aggreg[, names(new_col_names)], new_col_names)

datatable(rq3_household_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold') 


```

### Doses distribution

```{r rq3 household boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_stacked_custom_q4(data = rq3_household_doses, 
                              x_var = "household_type_cd",
                                       y_var = "value",
                                       group_var = "doses",  # Grouping variable
                              x_label = "Household type",
                              y_label = "Percentage",
                              plot_title = "Distribution of COVID-19 vaccine doses by Household type",
                              legend_title = 'Number of doses',
                              x_axis_order = plotOrderHousehold)
fig

```

<br>

```{r rq3 household table doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_household_doses <- rq3_household_doses %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(household_type_cd = "Household type", 
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_household_doses_table <- setNames(rq3_household_doses[, names(new_col_names)], new_col_names)

datatable(rq3_household_doses_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```

:::

## Age group

::: panel-tabset

### Overall status

```{r rq3 agegroup barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


fig <- barplot_custom(data = rq3_age_aggreg %>% filter(fully_vaccinated_bl == TRUE),
                              x_var = 'age_cd',
                              y_var = 'overall',
                              x_label = "Age groups",
                              y_label = "Percentage",
                              plot_title = "COVID-19 vaccination rate by Age groups",
                              legend_title = 'Status',
                              x_axis_order = plotOrderAge)
fig



```

### Subgroup status

```{r rq3 agegroup boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq3_age_aggreg,
                                       x_var = "age_cd",
                                       y_var = "subgroup",
                                       group_var = "fully_vaccinated_bl",
                                       x_label = "Age groups",
                                       y_label = "Percentage",
                                       plot_title = "COVID-19 vaccination rate by Age groups",
                                       legend_title = "Status",
                                       x_axis_order = plotOrderAge)

p1_plotly


```

### Statistics

```{r rq3 agegroup table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_age_aggreg <- rq3_age_aggreg %>% filter(fully_vaccinated_bl == TRUE)

rq3_age_aggreg <- rq3_age_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(age_cd = "Age groups", 
                   n = "N", # Total individuals per group
                   overall = "Subgroup",
                   subgroup = "Overall")

rq3_age_table <- setNames(rq3_age_aggreg[, names(new_col_names)], new_col_names)

datatable(rq3_age_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold') 


```

### Doses distribution

```{r rq3 agegroup boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_stacked_custom_q4(data = rq3_age_doses,
                              x_var = 'age_cd',
                                       y_var = "value",
                                       group_var = "doses",  # Grouping variable
                              x_label = "Age groups",
                              y_label = "Percentage",
                              plot_title = "Distribution of COVID-19 vaccine doses by Age Group",
                              legend_title = 'Number of doses',
                              x_axis_order = plotOrderAge)
fig


```

<br>

```{r rq3 agegroup table doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_age_doses <- rq3_age_doses %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(age_cd = "Age groups", 
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_age_doses_table <- setNames(rq3_age_doses[, names(new_col_names)], new_col_names)

datatable(rq3_age_doses_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```


:::

## Sex

::: panel-tabset

### Overall status

```{r rq3 sex barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_custom(data = rq3_sex_aggreg %>% filter(fully_vaccinated_bl == TRUE),
                              x_var = 'sex_cd',
                              y_var = 'overall',
                              x_label = "Sex",
                              y_label = "Percentage",
                              plot_title = "COVID-19 vaccination rate by Sex",
                              legend_title = 'Status',
                              x_axis_order = plotOrderSex)
fig


```

### Subgroup status

```{r rq3 sex boxplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq3_sex_aggreg,
                                       x_var = "sex_cd",
                                       y_var = "subgroup",
                                       group_var = "fully_vaccinated_bl",
                                       x_label = "Sex",
                                       y_label = "Percentage",
                                       plot_title = "COVID-19 vaccination rate by Sex",
                                       legend_title = 'Status',
                                       x_axis_order = plotOrderSex)

p1_plotly


```

### Statistics

```{r rq3 sex table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_sex_aggreg <- rq3_sex_aggreg %>% filter(fully_vaccinated_bl == TRUE)

rq3_sex_aggreg <- rq3_sex_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(sex_cd = "Sex", 
                   n = "N", # Total individuals per group
                   overall = "Subgroup",
                   subgroup = "Overall")

rq3_sex_table <- setNames(rq3_sex_aggreg[, names(new_col_names)], new_col_names)

datatable(rq3_sex_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold') 


```

### Doses distribution

```{r rq3 sex boxplot2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

fig <- barplot_stacked_custom_q4(data = rq3_sex_doses,
                              x_var = 'sex_cd',
                                       y_var = "value",
                                       group_var = "doses",  # Grouping variable
                              x_label = "Sex",
                              y_label = "Percentage",
                              plot_title = "Distribution of COVID-19 vaccine doses by Sex",
                              legend_title = 'Number of doses',
                              x_axis_order = plotOrderSex)
fig

```

<br>

```{r rq3 sex table doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 5

rq3_sex_doses <- rq3_sex_doses %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(sex_cd = "Sex", 
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_sex_doses_table <- setNames(rq3_sex_doses[, names(new_col_names)], new_col_names)

datatable(rq3_sex_doses_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```

:::

## Residence Area

::: panel-tabset

### NUTS2 Level Area

::: panel-tabset

#### Overall

COVID-19 Vaccination rate in whole cohort.

```{r rq3 area nuts2 overall}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# add geometry 
geometry_nuts2 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 2) %>% 
  select(NUTS_ID, NUTS_NAME)

rq3_area_nuts2_with_geometry <- left_join(geometry_nuts2, rq3_area_nuts2_aggreg, join_by("NUTS_ID" == "residence_area_nuts2_cd")) %>% distinct()

rq3_area_nuts2_with_geometry <- rq3_area_nuts2_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))


rq3_area_nuts2_with_geometry <- rq3_area_nuts2_with_geometry %>% filter(fully_vaccinated_bl == TRUE)

rq3_area_nuts2_with_geometry <- rq3_area_nuts2_with_geometry %>% select(-subgroup)

rq3_area_nuts2_with_geometry <- st_as_sf(rq3_area_nuts2_with_geometry)

map <- choropleth_map(rq3_area_nuts2_with_geometry, 
                          "viridis",
                          groupBy = NULL,
                          subdata = NULL, 
                          "overall",
                          "Vaccination",
                          "Vaccination (%)")
map


```

#### Subgroup status

COVID-19 Vaccination rate within subgroups.

```{r rq3 area nuts2 subgroup}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# add geometry 
geometry_nuts2 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 2) %>% 
  select(NUTS_ID, NUTS_NAME)

rq3_area_nuts2_with_geometry <- left_join(geometry_nuts2, rq3_area_nuts2_aggreg, join_by("NUTS_ID" == "residence_area_nuts2_cd")) %>% distinct()

rq3_area_nuts2_with_geometry <- rq3_area_nuts2_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))


rq3_area_nuts2_with_geometry <- rq3_area_nuts2_with_geometry %>% filter(fully_vaccinated_bl == TRUE)

rq3_area_nuts2_with_geometry <- rq3_area_nuts2_with_geometry %>% select(-overall)

rq3_area_nuts2_with_geometry <- st_as_sf(rq3_area_nuts2_with_geometry)

map <- choropleth_map(rq3_area_nuts2_with_geometry, 
                          "viridis",
                          groupBy = NULL,
                          subdata = NULL, 
                          "subgroup",
                          "Vaccination",
                          "Vaccination (%)")
map


```

#### Statistics

COVID-19 Vaccination rate in whole cohort & whithin subgroups.

```{r rq3 area nuts2 stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


rq3_area_nuts2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 2) %>%
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)


rq3_area_nuts2 <- left_join(rq3_area_nuts2, rq3_area_nuts2_aggreg, join_by(NUTS_ID == residence_area_nuts2_cd))

rq3_area_nuts2 <- rq3_area_nuts2 %>% filter(fully_vaccinated_bl == TRUE) %>% distinct()


new_col_names <- c(NUTS_ID = "NUTS2",
                   NUTS_NAME = "Area",
                   n = "N", # Total individuals per group
                   subgroup = "Subgroup",
                   overall = "Overall")

rq3_area_nuts2_table <- setNames(rq3_area_nuts2[, names(new_col_names)], new_col_names)

datatable(rq3_area_nuts2_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold')


```

#### Doses distribution

Distribution of COVID-19 vaccine doses.

```{r rq3 area doses nuts2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq3_area_nuts2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 2) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(doses = c("0", "1", "2 or more"))


rq3_area_nuts2_doses_with_geometry <- left_join(rq3_area_nuts2, rq3_area_nuts2_doses, join_by(NUTS_ID == residence_area_nuts2_cd, doses == doses)) %>% distinct() %>%
  mutate(value = value*100)

subdata <- c("0", "1", "2 or more")

rq3_area_nuts2_doses_with_geometry <- st_as_sf(rq3_area_nuts2_doses_with_geometry)


map <- choropleth_map(rq3_area_nuts2_doses_with_geometry, 
                            "viridis", 
                            "doses",
                            subdata, 
                            "value", 
                            "Doses distribution", 
                            "Distribution (%)")
map


```

<br>

```{r rq3 area nuts2 stat doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8





rq3_area_nuts2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 2) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  st_drop_geometry %>%
  crossing(doses = c("0", "1", "2 or more"))


rq3_area_nuts2 <- left_join(rq3_area_nuts2, rq3_area_nuts2_doses, join_by(NUTS_ID == residence_area_nuts2_cd, doses == doses)) %>% distinct()


rq3_area_nuts2 <- rq3_area_nuts2 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

rq3_area_nuts2 <- rq3_area_nuts2 %>% st_drop_geometry

new_col_names <- c(NUTS_ID = "NUTS2",
                   NUTS_NAME = "Area",
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_area_table <- setNames(rq3_area_nuts2[, names(new_col_names)], new_col_names)

datatable(rq3_area_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```

:::

### NUTS3 Level Area

::: panel-tabset

#### Overall

COVID-19 Vaccination rate in whole cohort.

```{r rq3 area nuts3 overall}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# add geometry 
geometry_nuts3 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 3) %>% 
  select(NUTS_ID, NUTS_NAME)

rq3_area_nuts3_with_geometry <- left_join(geometry_nuts3, rq3_area_nuts3_aggreg, join_by("NUTS_ID" == "residence_area_cd")) %>% distinct()

rq3_area_nuts3_with_geometry <- rq3_area_nuts3_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))


rq3_area_nuts3_with_geometry <- rq3_area_nuts3_with_geometry %>% filter(fully_vaccinated_bl == TRUE)

rq3_area_nuts3_with_geometry <- rq3_area_nuts3_with_geometry %>% select(-subgroup)

rq3_area_nuts3_with_geometry <- st_as_sf(rq3_area_nuts3_with_geometry)

map <- choropleth_map(rq3_area_nuts3_with_geometry, 
                          "viridis",
                          groupBy = NULL,
                          subdata = NULL, 
                          "overall",
                          "Vaccination",
                          "Vaccination (%)")
map

```

#### Subgroup status

COVID-19 Vaccination rate within subgroups.

```{r rq3 area nuts3 subgroup}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# add geometry 
geometry_nuts3 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 3) %>% 
  select(NUTS_ID, NUTS_NAME)

rq3_area_nuts3_with_geometry <- left_join(geometry_nuts3, rq3_area_nuts3_aggreg, join_by("NUTS_ID" == "residence_area_cd")) %>% distinct()

rq3_area_nuts3_with_geometry <- rq3_area_nuts3_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))


rq3_area_nuts3_with_geometry <- rq3_area_nuts3_with_geometry %>% filter(fully_vaccinated_bl == TRUE)

rq3_area_nuts3_with_geometry <- rq3_area_nuts3_with_geometry %>% select(-overall)

rq3_area_nuts3_with_geometry <- st_as_sf(rq3_area_nuts3_with_geometry)

map <- choropleth_map(rq3_area_nuts3_with_geometry, 
                          "viridis",
                          groupBy = NULL,
                          subdata = NULL, 
                          "subgroup",
                          "Vaccination",
                          "Vaccination (%)")
map

```

#### Statistics

COVID-19 Vaccination rate in whole cohort & whithin subgroups.

```{r rq3 area nuts3 stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


rq3_area_nuts3 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 3) %>%
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)


rq3_area_nuts3 <- left_join(rq3_area_nuts3, rq3_area_nuts3_aggreg, join_by(NUTS_ID == residence_area_cd))

rq3_area_nuts3 <- rq3_area_nuts3 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

rq3_area_nuts3 <- rq3_area_nuts3 %>% filter(fully_vaccinated_bl == TRUE) %>% distinct()

new_col_names <- c(NUTS_ID = "NUTS3",
                   NUTS_NAME = "Area",
                   n = "N", # Total individuals per group
                   subgroup = "Subgroup",
                   overall = "Overall")

rq3_area_nuts3_table <- setNames(rq3_area_nuts3[, names(new_col_names)], new_col_names)

datatable(rq3_area_nuts3_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold')


```


#### Doses distribution

Distribution of COVID-19 vaccine doses.

```{r rq3 area doses nuts3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq3_area_nuts3 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 3) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  crossing(doses = c("0", "1", "2 or more"))

rq3_area_nuts3_doses_with_geometry <- left_join(rq3_area_nuts3, rq3_area_nuts3_doses, join_by(NUTS_ID == residence_area_cd, doses == doses)) %>% distinct() %>%
  mutate(value = value*100)


subdata <- c("0", "1", "2 or more")

rq3_area_nuts3_doses_with_geometry <- st_as_sf(rq3_area_nuts3_doses_with_geometry)


map <- choropleth_map(rq3_area_nuts3_doses_with_geometry, 
                            "viridis", 
                            "doses",
                            subdata, 
                            "value", 
                            "Doses distribution", 
                            "Distribution (%)")
map


```

<br>

```{r rq3 area nuts3 stat doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


rq3_area_nuts3 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 3) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  st_drop_geometry %>%
  crossing(doses = c("0", "1", "2 or more"))


rq3_area_nuts3 <- left_join(rq3_area_nuts3, rq3_area_nuts3_doses, join_by(NUTS_ID == residence_area_cd, doses == doses)) %>% distinct()

rq3_area_nuts3 <- rq3_area_nuts3 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

rq3_area_nuts3 <- rq3_area_nuts3 %>% st_drop_geometry

new_col_names <- c(NUTS_ID = "NUTS3",
                   NUTS_NAME = "Area",
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_area_table <- setNames(rq3_area_nuts3[, names(new_col_names)], new_col_names)

datatable(rq3_area_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
  formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```

:::

### LAU2 Level Area

::: panel-tabset

#### Statistics

COVID-19 Vaccination rate in whole cohort & whithin subgroups.

```{r rq3 area lau2 stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq3_area_lau2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 4) %>%
  st_drop_geometry %>%
  select(NUTS_ID, NUTS_NAME)


rq3_area_lau2 <- left_join(rq3_area_lau2, rq3_area_lau2_aggreg, join_by(NUTS_ID == residence_area_lau_cd))

rq3_area_lau2 <- rq3_area_lau2 %>% filter(fully_vaccinated_bl == TRUE) %>% distinct()

rq3_area_lau2 <- rq3_area_lau2 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "LAU2",
                   NUTS_NAME = "Area",
                   n = "N", # Total individuals per group
                   subgroup = "Subgroup",
                   overall = "Overall")

rq3_area_table <- setNames(rq3_area_lau2[, names(new_col_names)], new_col_names)

datatable(rq3_area_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Subgroup", "Overall"), digits = 2) %>%
  formatStyle(columns = c("Subgroup", "Overall"), fontWeight = 'bold')


```

#### Doses distribution

Distribution of COVID-19 vaccine doses.

```{r rq3 area lau2 stat doses}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


rq3_area_lau2 <- nuts_shape %>%
  filter(CNTR_CODE == country,
         LEVL_CODE == 4) %>%
  select(NUTS_ID, NUTS_NAME) %>%
  st_drop_geometry %>%
  crossing(doses = c("0", "1", "2 or more"))


rq3_area_lau2 <- left_join(rq3_area_lau2, rq3_area_lau2_doses, join_by(NUTS_ID == residence_area_lau_cd, doses == doses)) %>% distinct()

rq3_area_lau2 <- rq3_area_lau2 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

rq3_area_lau2 <- rq3_area_lau2 %>% st_drop_geometry

new_col_names <- c(NUTS_ID = "LAU2",
                   NUTS_NAME = "Area",
                   n = "N", # Total individuals per group
                   doses = "Doses",
                   value = "Distribution")

rq3_area_table <- setNames(rq3_area_lau2[, names(new_col_names)], new_col_names)

datatable(rq3_area_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Distribution"), digits = 2) %>%
  formatStyle(columns = c("Doses", "Distribution"), fontWeight = 'bold') %>%
formatStyle(columns = "Doses", backgroundColor = styleEqual(c("0", "1", "2 or more"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```


:::

:::


## Hospitalisation Metrics

## Overview

::: panel-tabset

### Hospitalisation rate

```{r RQ4 general}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

plot_ly() %>%
  add_bars(data = rq4_general , x = ~hospi_due_to_covid_bl, y = ~ratio, name = "Hospitalisation status", marker = list(color = 'rgba(0,0,255,0.6)')) %>%
  layout(title = "COVID-19 hospitalisation in the whole cohort",
         xaxis = list(title = "COVID-19 Hospitalisation", tickmode = "linear", dtick = 1),
         yaxis = list(title = "Percentage", tickformat = ",.0%", hoverformat = ".2%"),
         barmode = 'overlay')

```

<br>

```{r RQ4 general2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

plot_ly() %>%
  add_bars(data = rq4_general2 , x = ~hospi_due_to_covid_bl, y = ~ratio, name = "Hospitalisation status", marker = list(color = 'rgba(0,0,255,0.6)')) %>%
  layout(title = "COVID-19 hospitalisation in vaccinated cohort",
         xaxis = list(title = "COVID-19 Hospitalisation", tickmode = "linear", dtick = 1),
         yaxis = list(title = "Percentage", tickformat = ",.0%", hoverformat = ".2%"),
         barmode = 'overlay')

```

### socioeconomic Profils

Percentage of COVID-19 hospitalisation in different socioeconomic profils.

```{r rq4 Socioeconomic table}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

rq4_summary <- rq4_summary %>% filter(hospi_due_to_covid_bl == TRUE)

rq4_summary <- rq4_summary %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(education_level_cd = "Education",
                   income_category_cd = "Income",
                   household_type_cd = "Household",
                   migration_background_cd = "Migration",
                   fully_vaccinated_bl = "Vaccinated",
                   n = "N",
                   ratio = "Overall")

rq4_summary_table <- setNames(rq4_summary[, names(new_col_names)], new_col_names)

datatable(rq4_summary_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall"), digits = 2) %>%
  formatStyle(columns = c("Overall"), fontWeight = 'bold') %>%
  formatStyle(columns = "Vaccinated", backgroundColor = styleEqual(c(FALSE, TRUE), c( "#FFF0F0", "#F0FFF0")))


```

:::

## Education level

::: panel-tabset

### Overall status

```{r rq4 education barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

barplot_grouped_custom1(data1 = rq4_education_aggreg %>% filter(cohort == "All"),
                        x_var1 = "education_level_cd",
                        y_var1 = "overall",
                        data2 = rq4_education_aggreg %>% filter(cohort == "Vaccinated"),
                        x_var2 = "education_level_cd",
                        y_var2 = "overall",
                        data3 = rq4_education_aggreg %>% filter(cohort == "Unvaccinated"),
                        x_var3 = "education_level_cd",
                        y_var3 = "overall",
                        x_label = "Education Level",
                        y_label = "Percentage",
                        plot_title = "COVID-19 Hospitalisations",
                        legend_title = "Cohort",
                        x_axis_order = plotOrderEducation)


```

### Subgroup status

```{r rq4 education barplot stacked}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_education_aggreg %>% filter(cohort == "All"),
                                    x_var = "education_level_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Education Level",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderEducation)

p1_plotly

```

<br>

```{r rq4 education barplot stacked 2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly2 <- barplot_stacked_custom_q4(data = rq4_education_aggreg %>% filter(cohort == "Vaccinated"),
                                    x_var = "education_level_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Education Level",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in vaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderEducation)

p1_plotly2

```

<br>

```{r rq4 education barplot stacked 3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly2 <- barplot_stacked_custom_q4(data = rq4_education_aggreg %>% filter(cohort == "Unvaccinated"),
                                    x_var = "education_level_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Education Level",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in unvaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderEducation)

p1_plotly2

```


### Statistics

```{r rq4 education stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_education_aggreg %>%
  select(education_level_cd) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_education_aggreg <- expanded_df %>%
  left_join(rq4_education_aggreg, join_by("education_level_cd", "cohort")) %>% filter(hospi_due_to_covid_bl == TRUE)

rq4_education_aggreg <- rq4_education_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))


new_col_names <- c(education_level_cd = "Education Level",
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_education_aggreg_table <- setNames(rq4_education_aggreg[, names(new_col_names)], new_col_names)

datatable(rq4_education_aggreg_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))


```



:::

## Income level

::: panel-tabset

### Overall status


```{r rq4 income barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

barplot_grouped_custom1(data1 = rq4_income_aggreg %>% filter(cohort == "All"),
                        x_var1 = "income_category_cd",
                        y_var1 = "overall",
                        data2 = rq4_income_aggreg %>% filter(cohort == "Vaccinated"),
                        x_var2 = "income_category_cd",
                        y_var2 = "overall",
                        data3 = rq4_income_aggreg %>% filter(cohort == "Unvaccinated"),
                        x_var3 = "income_category_cd",
                        y_var3 = "overall",
                        x_label = "Income Category",
                        y_label = "Percentage",
                        plot_title = "COVID-19 Hospitalisations",
                        legend_title = "Cohort",
                        x_axis_order = plotOrderIncome)


```

### Subgroup status

```{r rq4 income barplot stacked}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_income_aggreg %>% filter(cohort == "All"),
                                    x_var = "income_category_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Income Category",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderIncome)

p1_plotly

```

<br>

```{r rq4 income barplot stacked 2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq4_income_aggreg %>% filter(cohort == "Vaccinated"),
                                    x_var = "income_category_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Income Category",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in vaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderIncome)

p1_plotly


```

<br>

```{r rq4 income barplot stacked 3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_income_aggreg %>% filter(cohort == "Unvaccinated"),
                                    x_var = "income_category_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Income Category",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in unvaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderIncome)

p1_plotly

```


### Statistics

```{r rq4 income stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_income_aggreg %>%
  select(income_category_cd) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_income_aggreg <- expanded_df %>%
  left_join(rq4_income_aggreg, join_by("income_category_cd", "cohort")) %>% filter(hospi_due_to_covid_bl == TRUE)

rq4_income_aggreg <- rq4_income_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(income_category_cd = "Income Level",
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_income_aggreg_table <- setNames(rq4_income_aggreg[, names(new_col_names)], new_col_names)

datatable(rq4_income_aggreg_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))


```




:::


## Migration Background

::: panel-tabset

### Overall status


```{r rq4 migration barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

barplot_grouped_custom1(data1 = rq4_migration_aggreg %>% filter(cohort == "All"),
                        x_var1 = "migration_background_cd",
                        y_var1 = "overall",
                        data2 = rq4_migration_aggreg %>% filter(cohort == "Vaccinated"),
                        x_var2 = "migration_background_cd",
                        y_var2 = "overall",
                        data3 = rq4_migration_aggreg %>% filter(cohort == "Unvaccinated"),
                        x_var3 = "migration_background_cd",
                        y_var3 = "overall",
                        x_label = "Migration background",
                        y_label = "Percentage",
                        plot_title = "COVID-19 Hospitalisations",
                        legend_title = "Cohort",
                        x_axis_order = plotOrderMigration)


```

### Subgroup status

```{r rq4 migration barplot stacked}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_migration_aggreg %>% filter(cohort == "All"),
                                    x_var = "migration_background_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Migration background",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderMigration)

p1_plotly

```

<br>

```{r rq4 migration barplot stacked 2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq4_migration_aggreg %>% filter(cohort == "Vaccinated"),
                                    x_var = "migration_background_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Migration background",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in vaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderMigration)

p1_plotly


```

<br>

```{r rq4 migration barplot stacked 3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_migration_aggreg %>% filter(cohort == "Unvaccinated"),
                                    x_var = "migration_background_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Migration background",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in unvaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderMigration)

p1_plotly

```

### Statistics

```{r rq4 migration stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_migration_aggreg %>%
  select(migration_background_cd) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_migration_aggreg <- expanded_df %>%
  left_join(rq4_migration_aggreg, join_by("migration_background_cd", "cohort")) %>% filter(hospi_due_to_covid_bl == TRUE)

rq4_migration_aggreg <- rq4_migration_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(migration_background_cd = "Migration Migration",
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_migration_aggreg_table <- setNames(rq4_migration_aggreg[, names(new_col_names)], new_col_names)

datatable(rq4_migration_aggreg_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))


```



:::


## Household type

::: panel-tabset

### Overall status

```{r rq4 household barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

barplot_grouped_custom1(data1 = rq4_household_aggreg %>% filter(cohort == "All"),
                        x_var1 = "household_type_cd",
                        y_var1 = "overall",
                        data2 = rq4_household_aggreg %>% filter(cohort == "Vaccinated"),
                        x_var2 = "household_type_cd",
                        y_var2 = "overall",
                        data3 = rq4_household_aggreg %>% filter(cohort == "Unvaccinated"),
                        x_var3 = "household_type_cd",
                        y_var3 = "overall",
                        x_label = "Household type",
                        y_label = "Percentage",
                        plot_title = "COVID-19 Hospitalisations",
                        legend_title = "Cohort",
                        x_axis_order = plotOrderHousehold)


```

### Subgroup status

```{r rq4 household barplot stacked}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_household_aggreg %>% filter(cohort == "All"),
                                    x_var = "household_type_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Household type",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderHousehold)

p1_plotly

```

<br>

```{r rq4 household barplot stacked 2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq4_household_aggreg %>% filter(cohort == "Vaccinated"),
                                    x_var = "household_type_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Household type",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in vaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderHousehold)

p1_plotly


```

<br>

```{r rq4 household barplot stacked 3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_household_aggreg %>% filter(cohort == "Unvaccinated"),
                                    x_var = "household_type_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Household type",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in unvaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderHousehold)

p1_plotly

```


### Statistics

```{r rq4 household stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_household_aggreg %>%
  select(household_type_cd) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_household_aggreg <- expanded_df %>%
  left_join(rq4_household_aggreg, join_by("household_type_cd", "cohort")) %>% filter(hospi_due_to_covid_bl == TRUE)

rq4_household_aggreg <- rq4_household_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(household_type_cd = "Household Type",
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_household_aggreg_table <- setNames(rq4_household_aggreg[, names(new_col_names)], new_col_names)

datatable(rq4_household_aggreg_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))


```


:::



## Age groups

::: panel-tabset

### Overall status

```{r rq4 age_group barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

barplot_grouped_custom1(data1 = rq4_age_aggreg %>% filter(cohort == "All"),
                        x_var1 = "age_cd",
                        y_var1 = "overall",
                        data2 = rq4_age_aggreg %>% filter(cohort == "Vaccinated"),
                        x_var2 = "age_cd",
                        y_var2 = "overall",
                        data3 = rq4_age_aggreg %>% filter(cohort == "Unvaccinated"),
                        x_var3 = "age_cd",
                        y_var3 = "overall",
                        x_label = "Age group",
                        y_label = "Percentage",
                        plot_title = "COVID-19 Hospitalisations",
                        legend_title = "Cohort",
                        x_axis_order = plotOrderAge)


```

### Subgroup status

```{r rq4 age_group barplot stacked}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_age_aggreg %>% filter(cohort == "All"),
                                    x_var = "age_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Age group",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderAge)

p1_plotly

```

<br>

```{r rq4 age_group barplot stacked 2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq4_age_aggreg %>% filter(cohort == "Vaccinated"),
                                    x_var = "age_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Age group",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in vaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderAge)

p1_plotly


```

<br>

```{r rq4 age_group barplot stacked 3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_age_aggreg %>% filter(cohort == "Unvaccinated"),
                                    x_var = "age_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Age group",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in unvaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderAge)

p1_plotly

```

### Statistics

```{r rq4 age_group stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_age_aggreg %>%
  select(age_cd) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_age_aggreg <- expanded_df %>%
  left_join(rq4_age_aggreg, join_by("age_cd", "cohort")) %>% filter(hospi_due_to_covid_bl == TRUE)

rq4_age_aggreg <- rq4_age_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(age_cd = "Age groups",
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_age_aggreg_table <- setNames(rq4_age_aggreg[, names(new_col_names)], new_col_names)

datatable(rq4_age_aggreg_table,
          filter = "top",
          options = list(pageLength = 8, class = 'row-border stripe hover compact'),
          rownames = FALSE,
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```


:::


## Sex

::: panel-tabset

### Overall status

```{r rq4 sex barplot}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


barplot_grouped_custom1(data1 = rq4_sex_aggreg %>% filter(cohort == "All"),
                        x_var1 = "sex_cd",
                        y_var1 = "overall",
                        data2 = rq4_sex_aggreg %>% filter(cohort == "Vaccinated"),
                        x_var2 = "sex_cd",
                        y_var2 = "overall",
                        data3 = rq4_sex_aggreg %>% filter(cohort == "Unvaccinated"),
                        x_var3 = "sex_cd",
                        y_var3 = "overall",
                        x_label = "Sex",
                        y_label = "Percentage",
                        plot_title = "COVID-19 Hospitalisations",
                        legend_title = "Cohort",
                        x_axis_order = plotOrderSex)

```

### Subgroup status

```{r rq4 sex barplot stacked}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_sex_aggreg %>% filter(cohort == "All"),
                                    x_var = "sex_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Sex",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderSex)

p1_plotly

```

<br>

```{r rq4 sex barplot stacked 2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


p1_plotly <- barplot_stacked_custom_q4(data = rq4_sex_aggreg %>% filter(cohort == "Vaccinated"),
                                    x_var = "sex_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Sex",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in vaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderSex)

p1_plotly


```

<br>

```{r rq4 sex barplot stacked 3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

p1_plotly <- barplot_stacked_custom_q4(data = rq4_sex_aggreg %>% filter(cohort == "Unvaccinated"),
                                    x_var = "sex_cd",
                                    y_var = "subgroup",
                                    group_var = "hospi_due_to_covid_bl",  # Grouping variable
                                    x_label = "Sex",
                                    y_label = "Percentage",
                                    plot_title = "COVID-19 hospitalisations in unvaccinated population",
                                    legend_title = "COVID-19 Hospitalisations",
                                    x_axis_order = plotOrderSex)

p1_plotly

```

### Statistics

```{r rq4 sex stat}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_sex_aggreg %>%
  select(sex_cd) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_sex_aggreg <- expanded_df %>%
  left_join(rq4_sex_aggreg, join_by("sex_cd", "cohort")) %>% filter(hospi_due_to_covid_bl == TRUE)

rq4_sex_aggreg <- rq4_sex_aggreg %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(sex_cd = "Sex",
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_sex_aggreg_table <- setNames(rq4_sex_aggreg[, names(new_col_names)], new_col_names)

datatable(rq4_sex_aggreg_table, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```

:::


## Residence Area

::: panel-tabset
 
### NUTS2 Level Area

::: panel-tabset

#### Overall

COVID-19 Hospitalisation rate in whole cohort.

```{r rq4 area nuts2 map1}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8




# add geometry 
geometry_nuts2 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 2) %>% 
  select(NUTS_ID) %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))


rq4_area_nuts2_with_geometry <- left_join(geometry_nuts2, rq4_area_nuts2, join_by("NUTS_ID", "cohort")) %>% distinct()

rq4_area_nuts2_with_geometry <- rq4_area_nuts2_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))


rq4_area_nuts2_with_geometry <- st_as_sf(rq4_area_nuts2_with_geometry)


subdata <- c("All", "Vaccinated", "Unvaccinated")

map <- choropleth_map(rq4_area_nuts2_with_geometry, 
                              "viridis", 
                              "cohort",
                              subdata, 
                              "overall", 
                              "COVID-19 Hospitalisation rate", 
                              "Hospitalisation (%)")
map


```


#### Subgroup

COVID-19 Hospitalisation rate within subgroups.

```{r rq4 area nuts2 map2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# add geometry 
geometry_nuts2 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 2) %>% 
  select(NUTS_ID) %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))


rq4_area_nuts2_with_geometry <- left_join(geometry_nuts2, rq4_area_nuts2, join_by("NUTS_ID", "cohort")) %>% distinct()

rq4_area_nuts2_with_geometry <- rq4_area_nuts2_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))



rq4_area_nuts2_with_geometry <- st_as_sf(rq4_area_nuts2_with_geometry)


subdata <- c("All", "Vaccinated", "Unvaccinated")

map <- choropleth_map(rq4_area_nuts2_with_geometry, 
                              "viridis", 
                              "cohort",
                              subdata, 
                              "subgroup", 
                              "COVID-19 Hospitalisation rate", 
                              "Hospitalisation (%)")
map


```

#### Statistics

COVID-19 Hospitalisation rate in whole cohort & within subgroups.

```{r rq4 area stat nuts2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_area_nuts2 %>%
  select(NUTS_ID, NUTS_NAME) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_area_nuts2 <- expanded_df %>%
  left_join(rq4_area_nuts2, join_by("NUTS_ID", "NUTS_NAME", "cohort"))

rq4_area_nuts2 <- rq4_area_nuts2 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "NUTS2",
                   NUTS_NAME = "Name", 
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_area_table_nuts2 <- setNames(rq4_area_nuts2[, names(new_col_names)], new_col_names)

datatable(rq4_area_table_nuts2, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))


```


::: 


### NUTS3 Level Area

::: panel-tabset

#### Overall

COVID-19 Hospitalisation rate in whole cohort.

```{r rq4 area nuts3 map1}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# add geometry 
geometry_nuts3 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 3) %>% 
  select(NUTS_ID) %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))


rq4_area_nuts3_with_geometry <- left_join(geometry_nuts3, rq4_area_nuts3, join_by("NUTS_ID", "cohort")) %>% distinct()

rq4_area_nuts3_with_geometry <- rq4_area_nuts3_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))


rq4_area_nuts3_with_geometry <- st_as_sf(rq4_area_nuts3_with_geometry)


subdata <- c("All", "Vaccinated", "Unvaccinated")

map <- choropleth_map(rq4_area_nuts3_with_geometry, 
                              "viridis", 
                              "cohort",
                              subdata, 
                              "overall", 
                              "COVID-19 Hospitalisation rate", 
                              "Hospitalisation (%)")
map

```

#### Subgroup

COVID-19 Hospitalisation rate in whole cohort.

```{r rq4 area nuts3 map2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# add geometry 
geometry_nuts3 <- nuts_shape %>% 
  filter(CNTR_CODE == country, 
         LEVL_CODE == 3) %>% 
  select(NUTS_ID) %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))


rq4_area_nuts3_with_geometry <- left_join(geometry_nuts3, rq4_area_nuts3, join_by("NUTS_ID", "cohort")) %>% distinct()

rq4_area_nuts3_with_geometry <- rq4_area_nuts3_with_geometry %>%
  mutate(overall = round(overall*100, 2),
         subgroup = round(subgroup*100, 2))

rq4_area_nuts3_with_geometry <- st_as_sf(rq4_area_nuts3_with_geometry)


subdata <- c("All", "Vaccinated", "Unvaccinated")

map <- choropleth_map(rq4_area_nuts3_with_geometry, 
                              "viridis", 
                              "cohort",
                              subdata, 
                              "subgroup", 
                              "COVID-19 Hospitalisation rate", 
                              "Hospitalisation (%)")
map


```

#### Statistics

COVID-19 Hospitalisation rate in whole cohort & within subgroups.

```{r rq4 area stat nuts3}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8

# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_area_nuts3 %>%
  select(NUTS_ID, NUTS_NAME) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_area_nuts3 <- expanded_df %>%
  left_join(rq4_area_nuts3, join_by("NUTS_ID", "NUTS_NAME", "cohort"))

rq4_area_nuts3 <- rq4_area_nuts3 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "NUTS3",
                   NUTS_NAME = "Name", 
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_area_table_nuts3 <- setNames(rq4_area_nuts3[, names(new_col_names)], new_col_names)

datatable(rq4_area_table_nuts3, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))


```


::: 


### LAU2 Area level

::: panel-tabset

#### Statistics

COVID-19 Hospitalisation rate in whole cohort & within subgroups.

```{r rq4 area stat lau2}
#| echo: false
#| warning: false
#| error: false
#| fig-column: page-right
#| fig-width: 10
#| fig-height: 8


# Ensure all combinations of NUTS_ID and cohort exist
expanded_df <- rq4_area_lau2 %>%
  select(NUTS_ID, NUTS_NAME) %>%
  distinct() %>%
  crossing(cohort = c("All", "Vaccinated", "Unvaccinated"))

# Join with the existing data
rq4_area_lau2 <- expanded_df %>%
  left_join(rq4_area_lau2, join_by("NUTS_ID", "NUTS_NAME", "cohort"))

rq4_area_lau2 <- rq4_area_lau2 %>%
  mutate(n = as.character(n)) %>%
  mutate(n = ifelse(is.na(n), "Excluded", n))

new_col_names <- c(NUTS_ID = "LAU2",
                   NUTS_NAME = "Name", 
                   cohort = "Cohort",
                   n = "N",
                   overall = "Overall",
                   subgroup = "Subgroup")

rq4_area_table_lau2 <- setNames(rq4_area_lau2[, names(new_col_names)], new_col_names)

datatable(rq4_area_table_lau2, 
          filter = "top", 
          options = list(pageLength = 8, class = 'row-border stripe hover compact'), 
          rownames = FALSE, 
          autoHideNavigation = TRUE, escape = FALSE) %>%
  formatPercentage(columns = c("Overall", "Subgroup"), digits = 2) %>%
  formatStyle(columns = c("Overall", "Subgroup"), fontWeight = 'bold') %>%
  formatStyle(columns = "Cohort", backgroundColor = styleEqual(c("All", "Vaccinated", "Unvaccinated"), c( "#F0F0FF", "#F0FFF0", "#FFF0F0")))

```

:::

:::






